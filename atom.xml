<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yekongle</title>
  
  
  <link href="https://yekongle.github.io/atom.xml" rel="self"/>
  
  <link href="https://yekongle.github.io/"/>
  <updated>2022-03-18T13:50:49.484Z</updated>
  <id>https://yekongle.github.io/</id>
  
  <author>
    <name>Hank Lau</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot2 实战系列之多环境Profile</title>
    <link href="https://yekongle.github.io/2020/03/29/springboot-profile-sample/"/>
    <id>https://yekongle.github.io/2020/03/29/springboot-profile-sample/</id>
    <published>2020-03-29T08:28:18.000Z</published>
    <updated>2022-03-18T13:50:49.484Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在开发软件中，一个值得注意的问题就是当程序从一个环境迁移到另一个环境时，我们的程序是否依然正常运行，因为在开发阶段时，某些环境配置可能与生产环境不同，例如数据库配置，加密算法等。</p><p>在 Spring 中，你可以分别为不同的环境设置一个配置类，然后在运行时再根据环境来确定应该创建哪个 bean 和 不创建哪个 bean。在 Spring3.1 中，引入了 bean profile 的概念，可以将它理解为我们在Spring容器中所定义的Bean的逻辑组名称，对应到环境一般就是 dev(开发环境)，uat(用户测试环境), prod(生产环境)，在部署时指定激活哪个 profile 就行了。</p><span id="more"></span><p>在 SpringBoot 中，可以通过创建 application-{profile}.properties, 然后在application.properties 中来指定激活的 profile, 比如指定active profile 为 prod 后，spring就会加载 application-prod.properties。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=prod</span><br></pre></td></tr></table></figure><p>但这样如果每次更换环境时都要更改配置，就比较麻烦，所以可以利用 maven profiles 在构建应用时指定用什么 pofile，springboot 再将这个值替换就行了。</p><p>下面利用 server 端口来做一个例子， 分别为每个环境设置一个对应的端口。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>项目结构图如下：<br><img data-src="https://wx3.sinaimg.cn/mw690/005GXpqPgy1gdaw0tn5ptj30cs0d53yw.jpg" alt="image"></p><p>pom 依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.yekongle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-profile-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-profile-sample<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Profile sample for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--默认激活 dev 环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">active.profile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">active.profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>uat<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">active.profile</span>&gt;</span>uat<span class="tag">&lt;/<span class="name">active.profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">active.profile</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">active.profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--只包含全局 properties 和指定 profile 的properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>application.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>application-$&#123;active.profile&#125;.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>编辑 application.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对应 pom 中的 active.profile 属性，默认是 dev</span></span><br><span class="line">spring.profiles.active=@active.profile@</span><br></pre></td></tr></table></figure><p>创建 application-dev.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080</span><br></pre></td></tr></table></figure><p>创建 application-uat.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br></pre></td></tr></table></figure><p>创建 application-prod.properties</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br></pre></td></tr></table></figure><p>创建 HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>打开 IDEA 命令行, 分别输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 dev 环境</span></span><br><span class="line">mvn clean spring-boot:run -P dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 uat 环境</span></span><br><span class="line">mvn clean spring-boot:run -P uat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 prod 环境</span></span><br><span class="line">mvn clean spring-boot:run -P prod</span><br></pre></td></tr></table></figure><p>打开浏览器</p><p>访问 <a href="http://localhost:8080/">http://localhost:8080</a><br><img data-src="https://wx3.sinaimg.cn/mw690/005GXpqPgy1gd9q21b1d3j30dr04idfv.jpg" alt="image"></p><p>访问 <a href="http://localhost:8081/">http://localhost:8081</a><br><img data-src="https://wx4.sinaimg.cn/mw690/005GXpqPgy1gdaw16ax2xj30b7040dfr.jpg" alt="image"></p><p>访问 <a href="http://localhost/">http://localhost</a><br><img data-src="https://wx2.sinaimg.cn/mw690/005GXpqPgy1gdaw19f74kj30at03twee.jpg" alt="image"></p><p>可见为不同环境配置的端口访问成功。</p><p>项目已上传至 Github: <a href="https://github.com/yekongle/springboot-code-samples/tree/master/springboot-profile-sample">https://github.com/yekongle/springboot-code-samples/tree/master/springboot-profile-sample</a> , 希望对小伙伴们有帮助哦。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在开发软件中，一个值得注意的问题就是当程序从一个环境迁移到另一个环境时，我们的程序是否依然正常运行，因为在开发阶段时，某些环境配置可能与生产环境不同，例如数据库配置，加密算法等。&lt;/p&gt;
&lt;p&gt;在 Spring 中，你可以分别为不同的环境设置一个配置类，然后在运行时再根据环境来确定应该创建哪个 bean 和 不创建哪个 bean。在 Spring3.1 中，引入了 bean profile 的概念，可以将它理解为我们在Spring容器中所定义的Bean的逻辑组名称，对应到环境一般就是 dev(开发环境)，uat(用户测试环境), prod(生产环境)，在部署时指定激活哪个 profile 就行了。&lt;/p&gt;</summary>
    
    
    
    <category term="Spring Boot" scheme="https://yekongle.github.io/categories/Spring-Boot/"/>
    
    
    <category term="SpringBoot" scheme="https://yekongle.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot2 实战系列之使用HTTPS</title>
    <link href="https://yekongle.github.io/2020/03/28/springboot-https-sample/"/>
    <id>https://yekongle.github.io/2020/03/28/springboot-https-sample/</id>
    <published>2020-03-28T14:47:57.000Z</published>
    <updated>2022-03-18T13:50:49.484Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>各位小伙伴有没有发现，现在的网站基本都用上了 HTTP，因为 HTTP的通信是明文的，容易被不怀好意的人监听通信，窥探用户的隐私，这简直就是裸奔。而 HTTPS 使用 SSL 证书在加密通信前进行身份验证，协商加密算法以及交换密钥，可以满足基本的安全需求，即防窃取，防篡改，防钓鱼。</p><p>https 通信的流程如下:</p><span id="more"></span><p><img data-src="https://wx2.sinaimg.cn/mw690/005GXpqPgy1gda1374s05j30b10cz74u.jpg" alt="image"></p><p>可见数字证书非常重要，正规是使用权威的CA机构颁发的SSL证书的，可以在阿里云购买 CA 授权颁发的证书。一般个人用的话购买免费 DV SSL就行了，有效期一年。</p><p><img data-src="https://wx2.sinaimg.cn/mw690/005GXpqPgy1gda13bka5uj315z0oiq50.jpg" alt="image"></p><p>但下面为了方便演示，用 jdk 自带工具 keytool 生成一个自签名的数字证书。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><p>选择一个目录，打开命令行窗口，输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> yekong -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore yekong.p12 -validity 3650</span><br></pre></td></tr></table></figure><p>参数说明:</p><ul><li>genkey: 生成SSL证书</li><li>alias: 证书别名</li><li>storetype: 秘钥仓库类型</li><li>keyalg: 生成证书算法</li><li>keysize: 证书大小</li><li>keystore: 生成证书保存路径，也是证书名称</li><li>validity: 证书有效期<br><img data-src="https://wx4.sinaimg.cn/mw690/005GXpqPgy1gda13g2l97j30t208b750.jpg" alt="image"></li></ul><p>然后会在该目录下生成证书。</p><h4 id="IDEA新建一个项目"><a href="#IDEA新建一个项目" class="headerlink" title="IDEA新建一个项目"></a>IDEA新建一个项目</h4><p>项目结构如下，将前面生成的证书放到 src/main/resources 下。<br><img data-src="https://wx4.sinaimg.cn/mw690/005GXpqPgy1gd9q1xeuinj30dc0erdga.jpg" alt="image"></p><p>pom 依赖如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.yekongle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-https-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-https-sample<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Https sample for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p><strong>application.properties</strong><br>全局配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssl 配置</span></span><br><span class="line"><span class="comment"># 使用 443 端口，用于 https 服务</span></span><br><span class="line">server.port=443</span><br><span class="line"><span class="comment"># 指定类路径下的证书</span></span><br><span class="line">server.ssl.key-store=classpath:yekong.p12</span><br><span class="line"><span class="comment"># 证书密码</span></span><br><span class="line">server.ssl.key-store-password=yekong</span><br><span class="line"><span class="comment"># 证书算法</span></span><br><span class="line">server.ssl.key-store-type=PKCS12</span><br><span class="line"><span class="comment"># 证书别名</span></span><br><span class="line">server.ssl.key-alias=yekong</span><br><span class="line"></span><br><span class="line"><span class="comment"># thymeleaf 模板引擎配置</span></span><br><span class="line"><span class="comment"># 指定模板文件路径</span></span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line"><span class="comment"># 文件后缀为 html</span></span><br><span class="line">spring.thymeleaf.suffix=.html</span><br><span class="line">spring.thymeleaf.mode=HTML5</span><br><span class="line">spring.thymeleaf.encoding=UTF-8</span><br></pre></td></tr></table></figure><p><strong>login.html</strong><br>创建一个 login 页面作为返回演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.central</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;central&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Spring Boot https sample<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ServerConfig.java</strong><br>配置tomcat，当访问http时可以跳转到https</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.yekongle.https.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.SecurityConstraint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义内置Tomcat, 使访问 http 时可以自动跳转到 https</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Yekongle</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">servletContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessContext</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">                <span class="type">SecurityConstraint</span> <span class="variable">securityConstraint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityConstraint</span>();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);</span><br><span class="line">                <span class="type">SecurityCollection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityCollection</span>();</span><br><span class="line">                collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 配置静态资源访问</span></span><br><span class="line">             <span class="comment">/*SecurityConstraint securityConstraint1 = new SecurityConstraint();</span></span><br><span class="line"><span class="comment">                securityConstraint1.setUserConstraint(&quot;NONE&quot;);</span></span><br><span class="line"><span class="comment">                SecurityCollection collection1 = new SecurityCollection();</span></span><br><span class="line"><span class="comment">                collection.addPattern(&quot;/static/&quot;);</span></span><br><span class="line"><span class="comment">                securityConstraint.addCollection(collection1);</span></span><br><span class="line"><span class="comment">                context.addConstraint(securityConstraint1);*/</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(initiateHttpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connector <span class="title function_">initiateHttpConnector</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">        connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置http端口80,访问时不用加端口号</span></span><br><span class="line">        connector.setPort(<span class="number">80</span>);</span><br><span class="line">        connector.setSecure(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 跳转到https端口</span></span><br><span class="line">        connector.setRedirectPort(<span class="number">443</span>);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>LoginController.java</strong><br>接收 /login 请求，跳到 login页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.yekongle.https.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="测试演示"><a href="#测试演示" class="headerlink" title="测试演示"></a>测试演示</h3><p>启动项目，发现控制台报错<br><img data-src="https://wx1.sinaimg.cn/mw690/005GXpqPgy1gda13jn7rhj31gp0cedgz.jpg" alt="image"></p><p>原来是端口被占用，这种情况时常有之，打开cmd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 找出哪个进程监听443</span></span><br><span class="line">netstat -ano | find <span class="string">&quot;443&quot;</span></span><br><span class="line">TCP    0.0.0.0:443            0.0.0.0:0              LISTENING       6252</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看该进程具体信息</span></span><br><span class="line">netstat -ano | find <span class="string">&quot;6252&quot;</span></span><br><span class="line">vmware-hostd.exe              6252 Services                   0     27,324 K</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. ctrl + shit + esc 打开任务管理器关掉这个程序</span></span><br></pre></td></tr></table></figure><p>重新启动项目正常，浏览器输入地址如下，可以自动转到https。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/login</span><br></pre></td></tr></table></figure><p><img data-src="https://wx3.sinaimg.cn/mw690/005GXpqPgy1gda141feazj30f405daa8.jpg" alt="image"></p><p>项目已上传至 Github: <a href="https://github.com/yekongle/springboot-code-samples/tree/master/springboot-https-sample">https://github.com/yekongle/springboot-code-samples/tree/master/springboot-https-sample</a> , 希望对小伙伴们有帮助哦。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;各位小伙伴有没有发现，现在的网站基本都用上了 HTTP，因为 HTTP的通信是明文的，容易被不怀好意的人监听通信，窥探用户的隐私，这简直就是裸奔。而 HTTPS 使用 SSL 证书在加密通信前进行身份验证，协商加密算法以及交换密钥，可以满足基本的安全需求，即防窃取，防篡改，防钓鱼。&lt;/p&gt;
&lt;p&gt;https 通信的流程如下:&lt;/p&gt;</summary>
    
    
    
    <category term="Spring Boot" scheme="https://yekongle.github.io/categories/Spring-Boot/"/>
    
    
    <category term="https" scheme="https://yekongle.github.io/tags/https/"/>
    
    <category term="SpringBoot" scheme="https://yekongle.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Hexo更换电脑如何同步博客配置解决办法</title>
    <link href="https://yekongle.github.io/2020/03/28/hexo-online/"/>
    <id>https://yekongle.github.io/2020/03/28/hexo-online/</id>
    <published>2020-03-28T08:42:03.000Z</published>
    <updated>2022-03-18T13:50:49.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于使用 Hexo 搭建个人博客可参考本人另一篇博文: <a href="https://blog.csdn.net/qq_23483671/article/details/78635372">Hexo框架+NextT主题搭建博客教程</a></p><p>相信有不少小伙伴使用 Hexo 来搭建自己的个人博客，但问题是如果你电脑突然坏了，或者你想在其他电脑编辑发表你的博客，又要花费时间精力来重新配置你的站点，这样就比较麻烦。这时，我们可以将我们的站点放到 Github 或者其他 Git 托管平台，如此一来，无论你在哪里，都可以随时 clone 下来，简单配置下，就可以继续玩耍。</p><span id="more"></span><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="准备新仓库或新分支"><a href="#准备新仓库或新分支" class="headerlink" title="准备新仓库或新分支"></a>准备新仓库或新分支</h4><p>首先，你可以在 Github 创建一个新仓库或者直接在自己的 Gihubpage 仓库创建一条新 branch 来存放你的 hexo 相关配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地创建新分支 hexo 并切换到该分支</span></span><br><span class="line">git checkout -b hexo</span><br><span class="line"><span class="comment"># 推送分支并merge到远程分支hexo, 没有会自动创建</span></span><br><span class="line">git push origin hexo:hexo</span><br></pre></td></tr></table></figure><p><strong>或者用 eclipse 管理仓库，创建新分支</strong><br><img data-src="https://wx4.sinaimg.cn/mw690/005GXpqPgy1gd9psy57o5j30gv0bf74p.jpg" alt="image"></p><p><strong>推送分支到远程</strong><br><img data-src="https://wx1.sinaimg.cn/mw690/005GXpqPgy1gd9pt9yif0j30iu0ghjs7.jpg" alt="image"></p><h4 id="删掉分支-hexo-下面除了-git-的内容"><a href="#删掉分支-hexo-下面除了-git-的内容" class="headerlink" title="删掉分支 hexo 下面除了 git 的内容"></a>删掉分支 hexo 下面除了 git 的内容</h4><p><img data-src="https://wx3.sinaimg.cn/mw690/005GXpqPgy1gd9ptqwgf8j30ld0e0ab4.jpg" alt="image"></p><h4 id="将现有的-hexo-目录拷贝到该分支目录下"><a href="#将现有的-hexo-目录拷贝到该分支目录下" class="headerlink" title="将现有的 hexo 目录拷贝到该分支目录下"></a>将现有的 hexo 目录拷贝到该分支目录下</h4><p>要拷贝的文件或目录有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line"><span class="built_in">source</span>/</span><br><span class="line">themes/</span><br><span class="line">.gitignore</span><br></pre></td></tr></table></figure><p>.gitignore 里的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p><img data-src="https://wx3.sinaimg.cn/mw690/005GXpqPgy1gd9ptuwmgoj30l405vq35.jpg" alt="image"></p><h4 id="推送到远程分支"><a href="#推送到远程分支" class="headerlink" title="推送到远程分支"></a>推送到远程分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Add hexo&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="使用-hexo-分支"><a href="#使用-hexo-分支" class="headerlink" title="使用 hexo 分支"></a>使用 hexo 分支</h4><p>当需要在其他电脑编写博客时，就可以 clone 下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo https://github.com/yourname/xxx.github.io.git </span><br></pre></td></tr></table></figure><p>然后在新电脑配置 hexo 环境(需先安装 node.js 环境)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo-cli</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="使用回顾"><a href="#使用回顾" class="headerlink" title="使用回顾"></a>使用回顾</h4><p>进入 hexo 分支目录，打开命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文章</span></span><br><span class="line">hexo new <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建类别</span></span><br><span class="line">hexo new page <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地运行</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到 github page</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署完毕后记得将源文件 push 到远程，同步博客内容。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;关于使用 Hexo 搭建个人博客可参考本人另一篇博文: &lt;a href=&quot;https://blog.csdn.net/qq_23483671/article/details/78635372&quot;&gt;Hexo框架+NextT主题搭建博客教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相信有不少小伙伴使用 Hexo 来搭建自己的个人博客，但问题是如果你电脑突然坏了，或者你想在其他电脑编辑发表你的博客，又要花费时间精力来重新配置你的站点，这样就比较麻烦。这时，我们可以将我们的站点放到 Github 或者其他 Git 托管平台，如此一来，无论你在哪里，都可以随时 clone 下来，简单配置下，就可以继续玩耍。&lt;/p&gt;</summary>
    
    
    
    <category term="Interesting" scheme="https://yekongle.github.io/categories/Interesting/"/>
    
    
    <category term="hexo" scheme="https://yekongle.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot2 实战系列之属性配置</title>
    <link href="https://yekongle.github.io/2020/03/28/springboot-properties-sample/"/>
    <id>https://yekongle.github.io/2020/03/28/springboot-properties-sample/</id>
    <published>2020-03-28T06:14:26.000Z</published>
    <updated>2022-03-18T13:50:49.484Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在项目中我们常常需要配置一些基本的属性，比如连接数据库的 URL, Driven, username，password 等，这些配置内容如果放在代码中会变得难以维护, 想象一下，当你的应用配置信息临时需要变更时，你要改动代码然后重新编译打包再部署，如此一来就耗费大量时间，给用户带来不好体验。因此，我们通常将配置信息放在一个配置文件中，一般以 ==.properties== 结尾，因为可以直接通过 Properties 类读取。</p><p>在 Spring Boot 中，默认使用一个全局的配置文件 ==application.properties==, 同时也支持 ==application.yml==, 默认放在 ==src/main/resource== 下面, 可以直接将 .properties 改为 .yml, 效果一样。两者区别: <strong>properties 的配置是以 key=value 格式存储内容，而 yaml 则是以数据为中心的语言，配置更加清晰</strong>。如下面两者配置方式对比：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.properties</span></span><br><span class="line">server.port=8090</span><br><span class="line">server.context-path=/hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># applicaton.yml</span></span><br><span class="line">server:</span><br><span class="line">  port: 8090</span><br><span class="line">  contextPath: /hello</span><br></pre></td></tr></table></figure><p>日常开发，我个人习惯用 properties 文件来配置，因此下面使用该格式来进行配置。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img data-src="https://wx3.sinaimg.cn/mw690/005GXpqPgy1gd9q1thydsj31460jtq4q.jpg" alt="image"></p><p>项目结构图如下：<br><img data-src="https://wx4.sinaimg.cn/mw690/005GXpqPgy1gd9q1xeuinj30dc0erdga.jpg" alt="image"></p><p>pom 依赖文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.yekongle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-properties-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-properties-sample<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Properties sample for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>SpringBoot 项目启动后，会从 src/main/resource/ 下的全局配置 application.properties 或 application.yml 配置文件读取内容并加载到Spring 上下文，有几种方法可以将配置内容注入到属性中:</p><ol><li>用 @Value 注解注入类属性中。</li><li>当你的配置内容较多时，用 @Value 需要注入多次，可以通过 @ConfigurationProperties 将 properties 与 Java 类 及其属性相关联。</li><li>当你有一个自定义的配置文件，如 test.properties, springboot 默认不会加载，这时你可以通过 @PropertySource 引入这个配置文件，配合 @Value 和 @ConfigurationProperties 使用。</li></ol><p>application.properties(springboot 默认加载)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Book info</span></span><br><span class="line">book.author=yekongle</span><br><span class="line">book.name=SpringBoot</span><br><span class="line"></span><br><span class="line"><span class="comment"># Song info</span></span><br><span class="line">song.author=Taylor Swift</span><br><span class="line">song.name=Fearless</span><br></pre></td></tr></table></figure><p>SongConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.yekongle.properties.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 将其注册成 Bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> 指定属性前缀，绑定到类属性中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span> 自动生 getter setter 方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;song&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SongConfig</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String author;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>test.properties(自定义配置文件，通过 @PropertySource 引入)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Person info</span></span><br><span class="line">person.name=yekongle</span><br><span class="line">person.age=24</span><br></pre></td></tr></table></figure><p>PersonConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.yekongle.properties.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 将其注册成 Bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PropertySource</span> 指定类路径下配置文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> 自动生 getter setter 方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:test.properties&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonConfig</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IndexController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.yekongle.properties.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> top.yekongle.properties.config.PersonConfig;</span><br><span class="line"><span class="keyword">import</span> top.yekongle.properties.config.SongConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;book.author&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookAuthor;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;book.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SongConfig songConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonConfig personConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用 @Value 注入的配置内容</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;book author[%s], book name[%s]&quot;</span>, bookAuthor, bookName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用 @ConfigurationProperties 注入的配置内容</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/song&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">song</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;song author[%s], song name[%s]&quot;</span>, songConfig.getAuthor(), songConfig.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用 @PropertySource与ConfigurationProperties组合使用注入的配置内容</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/person&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;person name[%s], person age[%d]&quot;</span>, personConfig.getName(), personConfig.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><ol><li>访问 <a href="http://localhost:8080/">http://localhost:8080/</a><br><img data-src="https://wx3.sinaimg.cn/mw690/005GXpqPgy1gd9q21b1d3j30dr04idfv.jpg" alt="image"></li></ol><ol start="2"><li><p>访问 <a href="http://localhost:8080/book">http://localhost:8080/book</a><br><img data-src="https://wx4.sinaimg.cn/mw690/005GXpqPgy1gd9q24rk3dj30df03hdfv.jpg" alt="image"></p></li><li><p>访问 <a href="http://localhost:8080/person">http://localhost:8080/person</a><br><img data-src="https://wx3.sinaimg.cn/mw690/005GXpqPgy1gd9q27wjfbj30ba03mt8p.jpg" alt="image"></p></li></ol><p>项目已上传至 Github: <a href="https://github.com/yekongle/springboot-code-samples/tree/master/springboot-properties-sample">https://github.com/yekongle/springboot-code-samples/tree/master/springboot-properties-sample</a> , 希望对小伙伴们有帮助哦。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在项目中我们常常需要配置一些基本的属性，比如连接数据库的 URL, Driven, username，password 等，这些配置内容如果放在代码中会变得难以维护, 想象一下，当你的应用配置信息临时需要变更时，你要改动代码然后重新编译打包再部署，如此一来就耗费大量时间，给用户带来不好体验。因此，我们通常将配置信息放在一个配置文件中，一般以 ==.properties== 结尾，因为可以直接通过 Properties 类读取。&lt;/p&gt;
&lt;p&gt;在 Spring Boot 中，默认使用一个全局的配置文件 ==application.properties==, 同时也支持 ==application.yml==, 默认放在 ==src/main/resource== 下面, 可以直接将 .properties 改为 .yml, 效果一样。两者区别: &lt;strong&gt;properties 的配置是以 key=value 格式存储内容，而 yaml 则是以数据为中心的语言，配置更加清晰&lt;/strong&gt;。如下面两者配置方式对比：&lt;/p&gt;</summary>
    
    
    
    <category term="Spring Boot" scheme="https://yekongle.github.io/categories/Spring-Boot/"/>
    
    
    <category term="SpringBoot" scheme="https://yekongle.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java常见设计模式</title>
    <link href="https://yekongle.github.io/2019/03/19/common-design-patterns/"/>
    <id>https://yekongle.github.io/2019/03/19/common-design-patterns/</id>
    <published>2019-03-19T13:35:43.000Z</published>
    <updated>2022-03-18T13:50:49.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>设计模式的概念最早来源于建筑大师 Alexander 的《建筑的永恒方法一书》，书中的观点实际上也适用于软件设计领域。Alexander 是这样描述模式的：<br><strong>模式是一条有三个部分组成的通用规则：它表示了一个特定环境、一类问题和一个解决方案之间的关系。每一个模式描述了一个不断重复发生的问题，以及该问题解决方案的核心设计。</strong></p><span id="more"></span><p>软件设计模式通常被分成三类：</p><ol><li>创建型：创建对象时，不再直接实例化对象，而是根据特定场景，由程序来确定创建对象的方式，从而保证更高的性能、更好的架构优势。创建型模式主要有简单工厂模式、工厂方法、抽象工厂模式、单例模式、生成器模式和原型模式。</li><li>结构型：用于帮助将多个对象组织成更大的结构。结构型模式主要有适配器模式、桥接模式、组合器模式、装饰器模式、门面模式、享元模式和代理模式。</li><li>行为型：用于帮助系统间各对象的通信，以及如何控制复杂系统中的流程。行为型模式主要有命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模板模式和访问模式。</li></ol><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>如何一个类始终只能创建一个实例，则这个类被称为单例类，这种模式就被称为单例模式。有时候访问系统的某些组件时只需访问其一个实例，而不需重复创建实例，如对spring 框架而言，推荐将一些公共的业务逻辑组件、DAO组件、数据源组件配置成单例的行为方式，因为这些组件无须保存任何用户状态，设为单例的行为方式，所有客户端都可以共享这些组件。</p><p>单例模式需保证类只能产生一个实例，因此需要隐藏类的构造器，同时设置一个公共静态方法用于访问该实例对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 19, 2019 10:07:07 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 单例模式:1.减少重复创建实例带来的系统开销 2.便于跟踪单个实例生命周期、状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"><span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"><span class="comment">// 查看两个对象是否相等</span></span><br><span class="line">System.out.println(instance1 == instance2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><p>日常开发中，常常会遇到应用中各实例之间存在复杂的调用关系，即依赖关系，如 A 实例需要调用 B 实例，则称 A 实例依赖于 B 实例。在 A 对象需要调用 B 对象的方法时，最普通的做法是使用 new 关键字来创建 B对象，再用 B 对象来调用其方法。从语法的角度，这不会出现任何问题，但该做法的弊端在于：A 类方法内直接调用了 B 类的类名，这种方式便是硬编码耦合，当系统需要重构时，如果需要用 C 替换 B，那么就需要修改 A 方法，如果有成百上千个类都以类似 A 的方式耦合了 B，那么要修改的地方也有成百上千个，这是非常可怕的。</p><p>如果换一个角度来思考这个问题， A 不关心 B 的构造过程是怎么的，它只需要用到 B 的方法而已。考虑让 B 实现一个接口 IB，而 A 只需要 IB 接口耦合， A 不需直接通过 new 的方式来获得 B 实例，而是通过一个工厂类 IBFactory 来负责创建 B实例；A 只需通过工厂的方法即可获得B实例。如果系统重构时需要用 C 替换B，则 C 也实现 IB 接口，并且工厂原来创建 B 实例的方法改为创建 C 实例就可以了。</p><p>观看以下一个例子， 某位主人想撸猫, 他不关心猫是怎样产生的，只想在撸猫过程中听到猫叫和看到猫吃东西， 则通过动物工厂拿到了猫的实例对象，然后调用猫的行为方法，在这个过程中，猫实现了动物接口的基本行为，主人只需与猫的特殊抽象：动物接口耦合，并通过工厂返回动物接口的猫实例，就能与猫互动了。假若有一天，他觉得猫太高冷了不想撸猫想撸狗了，则同样将狗这个对象实现动物接口的基本方法，然后修改工厂方法改为生产狗就行了，不需要修改这位主人的主体行为方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 19, 2019 10:54:33 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 接口动物的行为</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 19, 2019 10:48:34 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 猫的行为</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;喵喵喵~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我要吃鱼。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* @author Kevin Lau</span><br><span class="line">* @version 创建时间：Mar 19, 2019 10:51:06 PM</span><br><span class="line">* @Description 狗的行为</span><br><span class="line">*/</span><br><span class="line">public class Dog implements Animal&#123;</span><br><span class="line"></span><br><span class="line">public void speak() &#123;</span><br><span class="line">System.out.println(&quot;旺旺旺~~&quot;);</span><br><span class="line">&#125; </span><br><span class="line">public void eat() &#123;</span><br><span class="line">System.out.println(&quot;我要啃骨头。&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 19, 2019 10:55:25 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 动物梦工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Animal <span class="title function_">getAnimal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="comment">//return new Dog();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 19, 2019 10:53:09 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 人的行为</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">playWithAnimal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 传统做法</span></span><br><span class="line"><span class="comment">// Cat cat = new Cat();</span></span><br><span class="line"><span class="comment">// Dog dog = new Dog();</span></span><br><span class="line"><span class="type">AnimalFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimalFactory</span>();</span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> factory.getAnimal();</span><br><span class="line">animal.speak();</span><br><span class="line">animal.eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">playWithAnimal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h4><p>在简单工厂模式中，系统使用工厂类来生产实例，由该工厂类来决定生产哪个类的实例，若要返回不同实例则需修改逻辑判断，如果不想在工厂类中进行逻辑判断，可以为不同产品类提供不同的工厂，由不同的工厂类来生产对应的实例。</p><p>以上面为例子，将动物工厂抽象成接口，同时提供生产猫和生产狗的两个工厂实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 19, 2019 10:55:25 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 动物梦工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AnimalFactory</span> &#123;</span><br><span class="line"> Animal <span class="title function_">getAnimal</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 20, 2019 9:27:38 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 猫工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CatFactory</span> <span class="keyword">implements</span> <span class="title class_">AnimalFactory</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Animal <span class="title function_">getAnimal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 20, 2019 9:25:13 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 狗工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DogFactory</span> <span class="keyword">implements</span> <span class="title class_">AnimalFactory</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Animal <span class="title function_">getAnimal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 19, 2019 10:53:09 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 人的行为</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">playWithAnimal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 撸猫</span></span><br><span class="line"><span class="type">CatFactory</span> <span class="variable">catFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CatFactory</span>();</span><br><span class="line"><span class="type">Animal</span> <span class="variable">cat</span> <span class="operator">=</span> catFactory.getAnimal();</span><br><span class="line">cat.speak();</span><br><span class="line">cat.eat();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撸狗</span></span><br><span class="line"><span class="type">DogFactory</span> <span class="variable">dogFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DogFactory</span>();</span><br><span class="line"><span class="type">Animal</span> <span class="variable">dog</span> <span class="operator">=</span> dogFactory.getAnimal();</span><br><span class="line">dog.speak();</span><br><span class="line">dog.eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">playWithAnimal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h4><p>从上面工厂方法的例子可看出，如果客户端需要调用多个不同的 Animal 实例时，程序必须要显式地创建不同的 AnimalFactory 实例，虽然客户端代码避免了与被调用对象的耦合，却需要与不同的工厂类进行耦合，这依然是个问题。</p><p>为了解决客户端与不同工厂类耦合的问题，考虑新增一个工厂类，但这个工厂类不是生产 Animal 实例，而是生产 AnimalFactory 实例，也就是说这个工厂类不再生产具体的被调用对象，而是生产工厂对象，这种设计模式也被称为抽象工厂模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 20, 2019 9:51:04 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 抽象工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalFactoryFactory</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> AnimalFactory <span class="title function_">getAnimalFactory</span><span class="params">(String type)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;cat&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CatFactory</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;dog&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DogFactory</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式是指当客户端需要调用某个对象时，客户端实际上不关心是否调用真正的对象，它只需要一个能够提供一个功能的对象即可，这样就可以使用真实对象的代理来达到使用该功能的目的。</p><p>总而言之，只要客户端不能或不想直接访问被调用对象，都可以通过设置代理对象来访问被代理对象的功能，出现这种情况的原因有很多，比如当需要创建一个系统开销比较大的对象或者被调用对象在远程主机上，又或者被调用对象需要增强功能时都可以设置代理。</p><p>观察下面一个例子，首先创建了一个图片接口，提供了一个对应的大图片实现类，其中从该实现类的构建方法可知实例化该对象时会有3秒的停顿，其实是为了模拟真实情况下大图片加载所带来的一定时间的花销。如果采用代理模式，直接实例化 BigImage，则系统会产生 3s 延迟，为了避免这种延迟，采用代理模式，新建了一个代理类，ImageProxy，同样实现了 Image 接口，内部有一个Image接口成员，用来指向被代理对象，从 show()方法可看出，当需要使用 show 功能时才会实例化被代理对象，因此系统初始化时实例化代理类不会产生额外的花销。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 20, 2019 10:21:32 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 图片接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 20, 2019 10:22:02 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 大图片</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"><span class="keyword">public</span>  <span class="title function_">BigImage</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 暂停3秒，模拟系统花销</span></span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;图片装载成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;绘制大图片&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 20, 2019 10:24:45 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 图片代理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageProxy</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Image image;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ImageProxy</span><span class="params">(Image image)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.image = image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 只有真正需要用到 show 方法时才会创建被代理对象</span></span><br><span class="line"><span class="keyword">if</span> (image == <span class="literal">null</span>) &#123;</span><br><span class="line">image = <span class="keyword">new</span> <span class="title class_">BigImage</span>();</span><br><span class="line">&#125;</span><br><span class="line">image.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 20, 2019 10:43:03 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">Image</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageProxy</span>(<span class="literal">null</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;系统得到 Image 对象的时间开销: &quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line"><span class="comment">// 只有真正调用show方法时才会创建被代理对象</span></span><br><span class="line">image.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面运行输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统得到 Image 对象的时间开销:0</span><br><span class="line">图片装载成功</span><br><span class="line">绘制大图片</span><br></pre></td></tr></table></figure><p>从结果可知，代理类其实是延迟了被代理对象的实例化，也就是延迟了系统开销，系统开销并不会减少，既然如此，使用代理类的好处是？可以从两个方面来回答该问题：</p><p>1.将被代理对象 BigImage 推迟到真正需要时才实例化可以保证前面程序的流畅性，减少 BigImage 在内存中的存活时间，从宏观上来看的确是节省了系统的内存开销。</p><p>2.在某些情况下，系统可能永远不会真正调用到 ImageProxy 的 show 方法，意味着系统无需创建 BigImage 对象，从而在一定程序性上避免了系统内1  ··  </p><p>存开销。比如在使用对象映射框架 Hibernate 时，Hibernate 的延迟加载就是采用这种这种设计模式，当 A 实体和 B 实体存在依赖关系时，Hibernate 默认启用延迟加载，当系统加载 A 实体时，A 关联的 B 实体并未被加载出来，A 关联的都是 B实体的代理对象，当 A 真正需要访问 B 时，系统才会去数据库抓取 B 实体对应的记录。可见， Hibernate 的延迟加载充分体现了代理模式的优势, 如果不使用代理模式，系统加载 A 时，同时也加载 A 关联的所有实体，这是多么大的一笔开销。 </p><p>除了上面处于系统性能考虑使用到代理模式之外，还有一种场景需要用到代理模式，便是需要增强目标对象功能的时候，当目标对象的功能不满足需求时，可以通过代理对象为被代理对象增强功能。借助 Java 提供的 Proxy 和 Invocationhandler，可以实现在运行时生成动态代理的对象，该动态代理对象就可以充当目标对象使用，同时也可增强目标对象的功能。</p><p>JDK 只能创建指定接口的动态代理，因此首先创建一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 12:11:59 AM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Man</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">desc</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 Gunman 类实现 Man 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 12:12:48 AM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GunMan</span> <span class="keyword">implements</span> <span class="title class_">Man</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">desc</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是男人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我奔跑迅速&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设客户端需要增强 Gunman 类的功能，比如添加事务控制，在目标方法执行之前开始事务，在目标方法执行之后结束事务。为了实现该功能，可以为目标对象创建一个代理对象，该代理对像实现了目标对象的接口，拥有目标对象的方法，并且增加了事务控制功能。</p><p>首先创建一个事务控制类，包括两个方法分别代表开始和结束事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 12:15:35 AM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxUtil</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beginTx</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;=== 模拟事务开始 ===&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endTx</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;=== 模拟事务结束 ===&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 InvocationHandler 接口的实现类，该接口的方法 invoke 方法将会作为代理对象的方法实现。通过这种方式，使得代理对象的方法既回调了被代理对象的方法，也为被代理对象的方法增加了事务功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 12:17:04 AM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 动态处理器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInvokationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line"><span class="comment">// 被代理对象</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当执行动态代理对象方法时，会被替换成执行以下方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="type">TxUtil</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TxUtil</span>();</span><br><span class="line"><span class="comment">// 模拟事务开始</span></span><br><span class="line">tx.beginTx();</span><br><span class="line"><span class="comment">// 以 target 作为主调来执行 method 方法</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line"><span class="comment">// 模拟事务结束</span></span><br><span class="line">tx.endTx();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面的动态代理工厂类将为指定的被代理对象生成动态代理实例，这个动态代理对象与被代理对象实现了相同的接口，当程序调用动态代理对象的公共方法时，实际上将会变成执行 MyInvokationHandler 的 invoke() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 12:24:16 AM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 动态代理工厂</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyFactory</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">MyInvokationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvokationHandler</span>();</span><br><span class="line">handler.setTarget(target);</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), handler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 12:28:21 AM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Man</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GunMan</span>();</span><br><span class="line"><span class="comment">// 指定 target 来创建动态代理对象</span></span><br><span class="line"><span class="type">Man</span> <span class="variable">manProxy</span> <span class="operator">=</span> (Man)MyProxyFactory.getProxy(target);</span><br><span class="line">manProxy.desc();</span><br><span class="line">manProxy.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行main方法，输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=== 模拟事务开始 ===</span><br><span class="line">我是男人</span><br><span class="line">=== 模拟事务结束 ===</span><br><span class="line">=== 模拟事务开始 ===</span><br><span class="line">我奔跑迅速</span><br><span class="line">=== 模拟事务结束 ===</span><br></pre></td></tr></table></figure><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>策略模式用来封装系列算法，这些算法通常被封装在一个被称为 Context 的类中，客户端程序可以自由选择其中一种算法，或者让 Context 为客户端选择一个最佳的算法，使用策略模式的目的是为了支持算法的自由切换。</p><p>考虑一种场景，比如网上书店会偶尔进行优惠购书的促销活动，那么网站需要考虑各种打折促销的活动。为了实现这些需求，程序传统做法使用如下方式来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 11:05:33 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Discount</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">VIP_DISCOUNT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">OLD_DISCOUNT</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> discountType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDiscountType</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> discountType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDiscountType</span><span class="params">(<span class="type">int</span> disCountType)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.discountType = disCountType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">discount</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="comment">// 针对不同情况采取不同的算法</span></span><br><span class="line"><span class="keyword">switch</span> (getDiscountType()) &#123;</span><br><span class="line"><span class="keyword">case</span> VIP_DISCOUNT:</span><br><span class="line"><span class="keyword">return</span> vipDiscount(price);</span><br><span class="line"><span class="keyword">case</span> OLD_DISCOUNT:</span><br><span class="line"><span class="keyword">return</span> oldDiscount(price);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">vipDiscount</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> price * <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">oldDiscount</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> price * <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段程序没有什么问题，但如果继续添加不同种类的折扣，则要至少要修改程序3个地方，首先要添加一个表示折扣种类的常量，然后在 switch 中新增一个case，最后还要添加一个计算新折扣的方法。根据 Java 设计对扩展开放对修改关闭的原则，这段程序显然不符合我们的要求。这种情况下，可以考虑使用策略模式来实现打折促销的功能。</p><p>创建一个折扣策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 11:07:35 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DiscountStrategy</span> &#123;</span><br><span class="line"><span class="comment">// 定义一个用于计算打折价的方法</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">getDiscount</span><span class="params">(<span class="type">double</span> originPrice)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建两个策略类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 11:09:47 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OldDiscount</span> <span class="keyword">implements</span> <span class="title class_">DiscountStrategy</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDiscount</span><span class="params">(<span class="type">double</span> originPrice)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;使用旧书折扣...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> originPrice * <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 11:08:18 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VipDiscount</span> <span class="keyword">implements</span> <span class="title class_">DiscountStrategy</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDiscount</span><span class="params">(<span class="type">double</span> originPrice)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;使用 VIP 折扣&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> originPrice * <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DiscountContext 类，为用户推荐折扣策略，也允许用户自行选择折扣策略。该 Context 类扮演了决策者的角色，它决定调用那个折扣策略来处理图书打折。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 11:10:51 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscountContext</span> &#123;</span><br><span class="line"><span class="comment">// 组合一个 DiscountStrategy 对象</span></span><br><span class="line"><span class="keyword">private</span> DiscountStrategy strategy;</span><br><span class="line"><span class="comment">// 构造器，传入一个 DiscountStrategy 对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DiscountContext</span><span class="params">(DiscountStrategy strategy)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据实际所使用的 DiscountStrategy 对象得到折扣价</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDiscountPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="comment">// 如果 strategy 为 null，则自动选择 oldDiscount 方法 </span></span><br><span class="line"><span class="keyword">if</span> (strategy == <span class="literal">null</span>) &#123;</span><br><span class="line">strategy = <span class="keyword">new</span> <span class="title class_">OldDiscount</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.strategy.getDiscount(price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供切换算法的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeDiscount</span><span class="params">(DiscountStrategy strategy)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 21, 2019 11:16:17 PM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">DiscountContext</span> <span class="variable">dContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiscountContext</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">price1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;100 元书默认打折后的价格是：&quot;</span> + dContext.getDiscountPrice(price1));</span><br><span class="line">dContext.changeDiscount(<span class="keyword">new</span> <span class="title class_">VipDiscount</span>());</span><br><span class="line"><span class="type">double</span> <span class="variable">price2</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;100 元书VIP打折后的价格是：&quot;</span> + dContext.getDiscountPrice(price2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重新考虑前面的需求，当业务需要新增一种打折类型，系统只需要新定义一个 DiscountStrategy实现类，实现接口的 getDiscount() 方法，用于实现新的折扣算法。当客户端需要改变折扣策略时，使用 DiscountContext 的 changeDiscount() 方法切换为新定义的折扣策略即可。</p><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>观察者模式是指在对象之间定义了一对多的依赖关系，当一个对象的状态发生改变时，依赖它的对象(观察者对象)就能收到系统的通知，从而使得观察者对象能够自动更新。</p><p>就相当于订阅者模式，发布者发布消息，订阅者订阅了发布者后就能收到通知或提示，比如你在社交平台上关注了某个人，当他/她更新了动态后，你就能收到系统通知。</p><p>观察下面例子来了解观察者模式：</p><p>首先创建一个观察者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 26, 2019 10:02:21 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 观察者接口，每个观察者都要实现该接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable observer, Object arg)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被观察者抽象基类，被观察者需要继承该抽象基类，类中提供了注册、删除观察者和通知观察者的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 26, 2019 10:07:00 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 被观察者抽象基类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line"><span class="comment">// List 集合用来保存该对象上所有绑定的事件监听器</span></span><br><span class="line">List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从该主题上注册观察者/订阅者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">observers.add(observer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从该主题中删除观察者/订阅者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">observers.remove(observer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知该主题上订阅的所有观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">(Object value)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(Observer observer : observers) &#123;</span><br><span class="line"><span class="comment">// 显示调用每个观察者的 update 方法</span></span><br><span class="line">observer.update(<span class="built_in">this</span>, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面创建了一个具体的被观察类：产品类，有两个属性名称和价格，当其属性改变时，调用抽象基类的通知方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 26, 2019 10:16:10 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 被观察者，产品</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">extends</span> <span class="title class_">Observable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Product</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">notifyObservers(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">notifyObservers(price);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体的观察者，名称观察者，当产品名称发生改变，将收到通知并打印名称消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 26, 2019 10:21:42 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>  名称观察者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameObserver</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable observer, Object arg)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arg <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span>  <span class="operator">=</span> (String)arg;</span><br><span class="line">System.out.println(<span class="string">&quot;被观察者&quot;</span>+ observer + <span class="string">&quot;产品名称更改为：&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体的观察者，价格观察者，具体的观察者，当产品价格发生改变，将收到通知并打印价格消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 26, 2019 10:25:41 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 价格观察者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriceObserver</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable observer, Object arg)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arg <span class="keyword">instanceof</span> Double) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;被观察者&quot;</span>+ observer + <span class="string">&quot;产品价格改变为：&quot;</span> + arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Kevin Lau</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 创建时间：Mar 26, 2019 10:30:25 PM</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span> 测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 被观察者</span></span><br><span class="line"><span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&quot;手机&quot;</span>, <span class="number">1999</span>);</span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="type">NameObserver</span> <span class="variable">nameObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NameObserver</span>();</span><br><span class="line"><span class="type">PriceObserver</span> <span class="variable">priceObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriceObserver</span>();</span><br><span class="line"><span class="comment">// 向被观察者注册两个观察者对象</span></span><br><span class="line">product.registObserver(nameObserver);</span><br><span class="line">product.registObserver(priceObserver);</span><br><span class="line"></span><br><span class="line">product.setName(<span class="string">&quot;电脑&quot;</span>);</span><br><span class="line">product.setPrice(<span class="number">4999</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考链接：</p><ul><li><a href="https://item.jd.com/12327466.html">轻量级Java EE企业应用实战</a></li><li><a href="https://www.cnblogs.com/luohanguo/p/7825656.html">罗汉果</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;设计模式的概念最早来源于建筑大师 Alexander 的《建筑的永恒方法一书》，书中的观点实际上也适用于软件设计领域。Alexander 是这样描述模式的：&lt;br&gt;&lt;strong&gt;模式是一条有三个部分组成的通用规则：它表示了一个特定环境、一类问题和一个解决方案之间的关系。每一个模式描述了一个不断重复发生的问题，以及该问题解决方案的核心设计。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://yekongle.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://yekongle.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Cordova开发篇</title>
    <link href="https://yekongle.github.io/2019/01/29/cordova-dev-learn/"/>
    <id>https://yekongle.github.io/2019/01/29/cordova-dev-learn/</id>
    <published>2019-01-29T15:06:16.000Z</published>
    <updated>2022-03-18T13:50:49.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android-平台"><a href="#Android-平台" class="headerlink" title="Android 平台"></a>Android 平台</h3><p>支持的Android API级别和过去几个cordova-android版本的Android版本：</p><table><thead><tr><th>cordova-android 版本</th><th>支持的 API 级别</th><th>实际安卓版本</th></tr></thead><tbody><tr><td>7.X.X</td><td>19 - 27</td><td>4.4 - 8.1</td></tr><tr><td>6.X.X</td><td>16 - 26</td><td>4.1 - 8.0.0</td></tr><tr><td>5.X.X</td><td>14 - 23</td><td>4.0 - 6.0.1</td></tr><tr><td>4.1.X</td><td>14 - 22</td><td>4.0 - 5.1</td></tr><tr><td>4.0.X</td><td>10 - 22</td><td>2.3.3 - 5.1</td></tr><tr><td>3.7.X</td><td>10 - 21</td><td>2.3.3 - 5.0.2</td></tr></tbody></table><span id="more"></span><p>需要注意的是，此处列出的版本适用于Cordova的Android软件包，cordova-android，而不适用于Cordova CLI。 要确定Cordova项目中安装的Cordova Android软件包的版本，请在包含项目的目录中运行命令cordova platform ls。</p><p>通常情况下，当某个Android版本在谷歌的发布平台上的支持率低于5%时，Cordova 就不再支持该Android版本。</p><h4 id="需求安装"><a href="#需求安装" class="headerlink" title="需求安装"></a>需求安装</h4><ol><li>Java Development Kit(JDK)</li></ol><p>下载安装 Java 开发工具包 <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">JDK8</a>。</p><ol start="2"><li>Gradle</li></ol><p>从Cordova-Android 6.4.0 起, 要构建 Android应用就必须安装<a href="https://gradle.org/">Gradle</a>。</p><ol start="3"><li>Android SDK</li></ol><p>安装 <a href="https://developer.android.com/studio/index.html">Android Studio</a>, 具体安装说明请查看 Android 开发网站。</p><ol start="4"><li>添加 SDK 包</li></ol><p>在安装完 Android SDK后，您还必须安装您希望开发的任何API级别的包,建议您安装您的cordova-android 所支持的最高 API 版本。</p><p>具体：打开 Android SDK 管理器，并且确保安装以下内容：</p><ul><li>您要开发的 Android SDK 版本</li><li>Android SDK 管理工具，版本在 19.1.0 以上。</li><li>Android支持库(可在“Extras”下找到)</li></ul><h4 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h4><ol><li>将 $JAVA_HOME 环境变量设置为JDK安装的位置</li><li>将 $ANDROID_HOME 环境变量设置为 Android SDK 安装的位置</li><li>同时也将 Android SDK 安装目录中的 tools， tools/bin 和 platfrom-tools 添加到环境变量。</li></ol><p>如果您是 OS X 或 Linux 系统，可以编辑 ~/.bash_profile 文件进行环境变量设置，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Development/android-sdk/</span><br></pre></td></tr></table></figure><p>更新系统 PATH：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/Development/android-sdk/platform-tools:/Development/android-sdk/tools</span><br></pre></td></tr></table></figure><p>使添加的环境变量生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>如果您是windows 系统，网上有很多设置设置安卓环境变量的教程，这里不再说明。</p><h4 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h4><h5 id="模拟器配置："><a href="#模拟器配置：" class="headerlink" title="模拟器配置："></a>模拟器配置：</h5><p>如果您希望你的Cordova App 运行在安卓模拟器上，您首先需要创建一个安卓虚拟机(AVD), 通常可以在 Android Studio 上快速创建和配置。AVD 创建完后，便可以通过 Cordova 命令运行App在模拟器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova run --emulator</span><br></pre></td></tr></table></figure><h5 id="Gradle-配置："><a href="#Gradle-配置：" class="headerlink" title="Gradle 配置："></a>Gradle 配置：</h5><p>对于<a href="mailto:&#99;&#111;&#x72;&#x64;&#x6f;&#118;&#97;&#x2d;&#x61;&#x6e;&#x64;&#x72;&#x6f;&#105;&#100;&#x40;&#52;&#x2e;&#x30;&#x2e;&#x30;">&#99;&#111;&#x72;&#x64;&#x6f;&#118;&#97;&#x2d;&#x61;&#x6e;&#x64;&#x72;&#x6f;&#105;&#100;&#x40;&#52;&#x2e;&#x30;&#x2e;&#x30;</a> 以上，Cordova的安卓项目是使用Gradle构建的。 有关使用Ant构建的说明，请参阅文档的旧版本，注意，从Android SDK Tools 25.3.0开始，就已经不推荐使用Ant版本。</p><p>Gradle属性配置：</p><p>可以通过设置 Cordova 公开的一些属性来配置 Gradle，以下是关于这些属性的说明：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>cdvBuildMultipleApks</td><td>配置这个属性，将生成多个 APK 文件，分别对应支持 X86、ARM 等平台，如果您的项目使用大型本地库，这个很重要，可以大大增加生成的APK 大小。如果不设置，则会生成一个可在多平台架构上使用的APK。</td></tr><tr><td>cdvVersionCode</td><td>会覆盖 AndroidManifest.xml 中的版本号</td></tr><tr><td>cdvReleaseSigningPropertiesFile</td><td>配置发行应用的签名文件，默认：release-signing.properties</td></tr><tr><td>cdvDebugSigningPropertiesFile</td><td>构建调试应用的签名文件，默认：debug-signing.properties, 在需要与其他开发人员共享签名密钥时非常有用</td></tr><tr><td>cdvMinSdkVersion</td><td>覆盖 AndroidManifest.xml 中的 minSdkVersion, 在根据 SDK 版本创建多个 APK时有用。</td></tr><tr><td>cdvBuildToolsVersion</td><td>覆盖自动检测到的 android.buildToolsVersion 值</td></tr><tr><td>cdvCompileSdkVersion</td><td>覆盖自动检测到的 android.compileSdkVersion  值</td></tr></tbody></table><p>你可以通过以下 4 种方式来设置这些属性：</p><ol><li>通过设置环境变量：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> ORG_GRADLE_PROJECT_cdvMinSdkVersion=20</span><br><span class="line">$ cordova build android</span><br></pre></td></tr></table></figure><ol start="2"><li>在 Cordova build 或 run 命令中使用 –gradleArg 参数：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova run android -- --gradleArg=-PcdvMinSdkVersion=20</span><br></pre></td></tr></table></figure><ol start="3"><li>在 <your-project>/platforms/android 目录下创建一个文件：gradle.properties，输入类似以下内容：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In &lt;your-project&gt;/platforms/android/gradle.properties</span></span><br><span class="line">cdvMinSdkVersion=20</span><br></pre></td></tr></table></figure><ol start="4"><li>使用 build-extras.gradle 文件对 build.gradle 进行扩展，类似如下所示设置属性：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// In &lt;your-project&gt;/platforms/android/build-extras.gradle</span><br><span class="line">ext.cdvMinSdkVersion = 20</span><br></pre></td></tr></table></figure><p>后面两种方式都是通过在您的安卓平台目录下添加一个额外的文件来进行属性配置，通常，不建议您编辑此文件夹的内容，因为这些更改很容易丢失或覆盖。 相反，应使用before_build hook 将这两个文件从另一个位置复制到该文件夹中作为构建命令的一部分。</p><h5 id="扩展-build-gradle-文件"><a href="#扩展-build-gradle-文件" class="headerlink" title="扩展 build.gradle 文件"></a>扩展 build.gradle 文件</h5><p>如果您需要自定义 build.gradle 文件，您应该创建一个名为build-extras.gradle的兄弟文件。此文件必须放在android平台目录（<your-project> / platforms / android）中，因此建议您通过附加到before_build挂钩的脚本将其复制。</p><p>一个例子如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Example build-extras.gradle</span><br><span class="line">// This file is included at the beginning of `build.gradle`</span><br><span class="line">ext.cdvDebugSigningPropertiesFile = <span class="string">&#x27;../../android-debug-keys.properties&#x27;</span></span><br><span class="line"></span><br><span class="line">// When <span class="built_in">set</span>, this <span class="keyword">function</span> allows code to run at the end of `build.gradle`</span><br><span class="line">ext.postBuildExtras = &#123;</span><br><span class="line">    android.buildTypes.debug.applicationIdSuffix = <span class="string">&#x27;.debug&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，插件还可以通过以下方式包含build-extras.gradle文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;framework src=<span class="string">&quot;some.gradle&quot;</span> custom=<span class="string">&quot;true&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;gradleReference&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h5 id="设置版本号"><a href="#设置版本号" class="headerlink" title="设置版本号"></a>设置版本号</h5><p>要更改应用程序生成的apk的版本代码，请在应用程序的config.xml文件的widget元素中设置android-versionCode属性。 如果未设置android-versionCode，则将使用version属性确定版本代码。 例如，如果版本是MAJOR.MINOR.PATCH：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">versionCode = MAJOR * 10000 + MINOR * 100 + PATCH</span><br></pre></td></tr></table></figure><p>如果您的应用程序已启用cdvBuildMultipleApks Gradle属性（请参阅设置Gradle属性），则应用程序的版本代码也将乘以10，以便代码的最后一位数字可用于指示apk构建的体系结构。 无论版本代码是从android-versionCode属性获取还是使用 version 生成，都会发生这种乘法。 请注意，添加到项目中的某些插件（包括cordova-plugin-crosswalk-webview）可能会自动设置此Gradle属性。</p><p>请注意：更新android-versionCode属性时，从构建的apks获取的版本号来增加是不明智的。 相反，您应该根据config.xml文件的android-versionCode属性中的值来增加。 这是因为cdvBuildMultipleApks属性导致版本号在构建的apks中乘以10，因此使用该值将导致您的下一个版本代码是原始版本号的100倍，等等。</p><h4 id="签署应用程序"><a href="#签署应用程序" class="headerlink" title="签署应用程序"></a>签署应用程序</h4><h5 id="使用标志"><a href="#使用标志" class="headerlink" title="使用标志"></a>使用标志</h5><p>要签署应用程序，您需要用到以下参数：</p><table><thead><tr><th>参数</th><th>标志</th><th>说明</th></tr></thead><tbody><tr><td>Keystore</td><td>–keystore</td><td>二进制文件的路径，可以容纳一组密钥</td></tr><tr><td>Keystore Password</td><td>–storePassword</td><td>密钥库的密码</td></tr><tr><td>Alias</td><td>–alias</td><td>id指定用于签名的私钥</td></tr><tr><td>Password</td><td>–password</td><td>指定私钥的密码</td></tr><tr><td>Type of the Keystore</td><td>–keystoreType</td><td>默认值：基于文件扩展名自动检测</td></tr><tr><td>无论是pkcs12还是jks默认值：基于文件扩展名自动检测</td><td></td><td></td></tr><tr><td>无论是pkcs12还是jks</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>可以使用上面的命令行参数为Cordova CLI构建或运行命令指定这些参数。</p><p>注意：您应该使用双 “-“ 表示这些是特定于平台的参数，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova run android --release -- --keystore=../my-release-key.keystore --storePassword=password --<span class="built_in">alias</span>=alias_name --password=password</span><br></pre></td></tr></table></figure><h5 id="使用-build-json"><a href="#使用-build-json" class="headerlink" title="使用 build.json"></a>使用 build.json</h5><p>或者，您可以使用相同命令的–buildConfig参数在构建配置文件（build.json）中指定它们。 以下是构建配置文件的示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;android&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keystore&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../android.keystore&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;storePassword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;android&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mykey1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;password&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;password&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keystoreType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;release&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keystore&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../android.keystore&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;storePassword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mykey2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;password&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;password&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keystoreType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对于发布签名，可以排除密码，构建系统将发出询问密码的提示。</p><p>还支持在build.json中混合和匹配命令行参数和参数。 命令行参数中的值将优先。 这对于在命令行上指定密码很有用。</p><h5 id="使用-Gradle"><a href="#使用-Gradle" class="headerlink" title="使用 Gradle"></a>使用 Gradle</h5><p>您还可以通过包含.properties文件并使用cdvReleaseSigningPropertiesFile和cdvDebugSigningPropertiesFile Gradle属性指向它来指定签名属性（请参阅设置Gradle属性）。 该文件应如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">storeFile=relative/path/to/keystore.p12</span><br><span class="line">storePassword=SECRET1</span><br><span class="line">storeType=pkcs12</span><br><span class="line">keyAlias=DebugSigningKey</span><br><span class="line">keyPassword=SECRET2</span><br></pre></td></tr></table></figure><p>storePassword和keyPassword是可选的，如果省略则会提示输入。</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>有关Android SDK随附的调试工具的详细信息，请参阅Android的开发人员文档以进行调试。 此外，Android的用于调试Web应用程序的开发人员文档提供了有关调试Webview中运行的应用程序部分的简介。</p><h5 id="Android-Studio中打开一个项目"><a href="#Android-Studio中打开一个项目" class="headerlink" title="Android Studio中打开一个项目"></a>Android Studio中打开一个项目</h5><p>Cordova-Android 项目可以在 Android Studio中打开。 如果您希望使用Android Studio内置的Android调试/分析工具，或者您正在开发Android插件，这将非常有用。 请注意，在Android studio中打开项目时，建议您不要在IDE中编辑代码。 这将编辑项目的平台文件夹（而不是www）中的代码，并且可能会覆盖更改。您应该编辑www文件夹并通过运行cordova build复制您的更改。</p><p>希望在IDE中编辑其本机代码的插件开发人员在通过cordova插件添加将其插件添加到项目时应使用–link标志。 这将链接文件，以便对平台文件夹中的插件文件的更改反映在插件的源文件夹中（反之亦然）。</p><p>要在Android Studio中打开Cordova-Android 项目：</p><ol><li>启动 Android Studio</li><li>选择导入一个项目<br><img data-src="http://wx3.sinaimg.cn/mw690/005GXpqPgy1fznuqimewhj30ff0c140y.jpg" alt="image"></li><li>选择 Android 平台目录，(<your-project>/platforms/android).</li></ol><p><img data-src="http://wx4.sinaimg.cn/mw690/005GXpqPgy1fznuqj7lpoj309r0b6jt6.jpg" alt="image"><br>4. 对于Gradle Sync问题，您只需回答“是”即可。</p><p>完成导入后，您应该能够直接从Android Studio构建和运行应用程序。 有关详细信息，请参阅Android Studio概述以及从Android Studio构建和运行。<br><img data-src="http://wx1.sinaimg.cn/mw690/005GXpqPgy1fznuqk4xd4j30jr0ceadh.jpg" alt="image"></p><h4 id="以平台为中心的工作流程"><a href="#以平台为中心的工作流程" class="headerlink" title="以平台为中心的工作流程"></a>以平台为中心的工作流程</h4><p>cordova-android包含许多脚本，允许在没有完整Cordova CLI的情况下使用该平台。 在某些情况下，此开发路径可为您提供比跨平台cordova CLI更多的开发选项。 例如，在将自定义Cordova WebView与本机组件一起部署时，需要使用shell工具。 在使用此开发路径之前，您仍必须按照上面的“要求和支持”中的说明配置Android SDK环境。</p><p>有关下面讨论的每个脚本，请参阅 <a href="https://cordova.apache.org/docs/en/latest/reference/cordova-cli/index.html">Cordova CLI</a>。 每个脚本都有一个与相应CLI命令匹配的名称。 例如，cordova-android / bin / create相当于cordova创建。</p><p>首先，从npm或Github下载cordova-android软件包。</p><p>要使用此包创建项目，请在bin文件夹中运行create script：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova-android/bin/create</span><br></pre></td></tr></table></figure><p>创建的项目将在其中包含一个名为cordova的文件夹，其中包含项目特定Cordova命令的脚本（例如，运行，构建等）。 此外，该项目将采用与普通Cordova项目不同的结构。 值得注意的是，/ www被移至/ assets / www。</p><h4 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h4><h5 id="Cordova-与-Android"><a href="#Cordova-与-Android" class="headerlink" title="Cordova 与 Android"></a>Cordova 与 Android</h5><p>原生Android应用程序通常包含用户与之交互的一系列活动。 可以将活动视为构成应用程序的各个屏幕; 应用程序中的不同任务通常会有自己的活动。 每个活动都有自己的生命周期，在活动进入和离开用户设备的前台时进行维护。</p><p>相比之下，Android平台上的Cordova应用程序在嵌入在单个Android活动中的Webview中执行。 此活动的生命周期通过触发的文档事件向您的应用程序公开。 这些事件不能保证与Android的生命周期一致，但它们可以提供保存和恢复状态的指南。 这些事件大致映射到Android回调，如下所示：</p><table><thead><tr><th>Cordova 事件</th><th>对应的 Andrid 事件</th><th>说明</th></tr></thead><tbody><tr><td>deviceready</td><td>onCreate()</td><td>应用程序正在启动（不是从后台）</td></tr><tr><td>pause</td><td>onPause()</td><td>应用程序进入后台运行</td></tr><tr><td>resume</td><td>onResume()</td><td>应用程序返回到前台</td></tr></tbody></table><p>大多数其他Cordova平台都有类似的生命周期概念，并且当用户的设备上发生类似的操作时，应触发这些相同的事件。 然而，Android带来了一些独特的挑战，由于原生活动生命周期，这些挑战有时会出现。</p><h5 id="为什么-Android-与众不同？"><a href="#为什么-Android-与众不同？" class="headerlink" title="为什么 Android 与众不同？"></a>为什么 Android 与众不同？</h5><p>在Android中，操作系统可以选择在后台终止活动，以便在设备内存不足时释放资源。 不幸的是，当您的应用程序活动被终止时，您的应用程序所在的Webview也将被销毁。 在这种情况下，您的应用程序维护的任何状态都将丢失。 当用户导航回您的应用程序时，操作系统将重新创建活动和Web视图，但不会为您的Cordova应用程序自动恢复状态。 因此，您的应用程序必须了解触发的生命周期事件并维护适当的状态，以确保应用程序中的用户上下文在离开应用程序时不会丢失。</p><h5 id="什么时候会发生？"><a href="#什么时候会发生？" class="headerlink" title="什么时候会发生？"></a>什么时候会发生？</h5><p>您的应用程序在离开用户视线时很容易被操作系统破坏， 有两种主要情况可能发生。 第一个也是最明显的情况是用户按下主页按钮或切换到另一个应用程序。</p><p>但是，某些插件可以引起第二种（更微妙的）情况。 如上所述，Cordova应用程序通常仅限于包含Webview的单个活动。 但是，有些情况下插件可以启动其他活动，并暂时将Cordova活动推送到后台。 通常会启动这些其他活动，以便使用设备上安装的本机应用程序执行特定任务。 例如，Cordova相机插件会启动设备上原生安装的任何相机活动以拍摄照片。 以这种方式重新使用已安装的相机应用程序会使您的应用程序在用户尝试拍照时更像本机应用程序。 不幸的是，当本机Activity将您的应用推送到后台时，操作系统有可能会将其杀死。</p><p>为了更清楚地理解第二种情况，让我们来看一个使用相机插件的例子。 想象一下，您有一个需要用户拍摄个人资料照片的应用程序。 一切按计划进行时，应用程序中的事件流将如下所示：</p><ol><li>用户正在与您的应用进行交互，需要拍照</li><li>相机插件启动本地相机活动<ul><li><em>Cordova活动被推送到后台(触发暂停事件)</em></li></ul></li><li>用户拍了一张照片</li><li>相机活动结束</li><li>Cordova活动被移到前台（恢复事件被触发）</li><li>用户返回到他们中断的应用程序</li></ol><p>但是，如果设备内存不足，则可能会中断此事件流。 如果活动被操作系统杀死，则上述事件序列将显示如下： </p><ol><li>用户正在使用您的应用程序并且需要拍一张照片</li><li>相机插件启动本地相机活动<ul><li><em>操作系统破坏Cordova活动（暂停事件被触发</em>）</li></ul></li><li>用户拍了一张照片</li><li>相机活动完成<ul><li><em>操作系统重新创建Cordova活动（deviceready 和resume 事件被触发）</em> </li></ul></li><li>用户对于他们突然回到您应用的登录屏幕的原因感到困惑</li></ol><p>在这种情况下，操作系统在后台杀死了应用程序，并且应用程序没有将其状态维持为生命周期的一部分。 当用户返回到应用程序时，Webview被重新创建，并且应用程序似乎已从头开始重新启动（因此用户感到困惑）。 这一系列事件等同于按下主页按钮或用户切换应用程序时发生的事件。 防止上述情况出现的关键是订阅事件并将状态正确地保持为活动生命周期的一部分。</p><h5 id="遵循生命周期"><a href="#遵循生命周期" class="headerlink" title="遵循生命周期"></a>遵循生命周期</h5><p>在上面的示例中，触发的javascript事件(斜体显示部分)。 这些事件是您保存和恢复应用程序状态的机会。 您应该在应用程序的 bindEvents 函数中注册回调，该函数通过保存状态来响应生命周期事件。 您保存的信息以及保存方式由您自行决定，但您应确保保存足够的信息，以便用户可以在用户返回应用程序时将其恢复到原来的位置。</p><p>在上面的示例中还有一个附加因素仅适用于第二个讨论的情况（即插件启动外部活动时）。 当用户完成拍照时，不仅应用程序的状态丢失，而且用户拍摄的照片也是如此。 通常，该照片将通过在相机插件中注册的回调传送到您的应用程序。 然而，当Webview被破坏时，回调永远丢失了。 幸运的是，cordova-android 5.1.0及更高版本提供了一种在应用程序恢复时获取该插件调用结果的方法。</p><h5 id="获取插件回调结果-cordova-android-5-1-0"><a href="#获取插件回调结果-cordova-android-5-1-0" class="headerlink" title="获取插件回调结果(cordova-android 5.1.0+)"></a>获取插件回调结果(cordova-android 5.1.0+)</h5><p>当操作系统破坏通过插件推送到后台的Cordova活动时，任何挂起的回调也会丢失。 这意味着如果您将回调传递给启动新活动的插件（例如相机插件），则在重新创建应用程序时不会触发该回调。 但是，从cordova-android 5.1.0开始，resume 事件的有效负载将包含插件请求中的任何挂起的插件结果，这些结果来自于在活动被销毁之前启动外部活动的插件请求。</p><p>resume事件的有效负载遵循以下格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    action<span class="punctuation">:</span> <span class="string">&quot;resume&quot;</span><span class="punctuation">,</span></span><br><span class="line">    pendingResult<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        pluginServiceName<span class="punctuation">:</span> string<span class="punctuation">,</span></span><br><span class="line">        pluginStatus<span class="punctuation">:</span> string<span class="punctuation">,</span></span><br><span class="line">        result<span class="punctuation">:</span> any</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>该有效载荷的字段定义如下：</p><ul><li>pluginServiceName：返回结果的插件的名称（例如“Camera”）。 这可以在插件的plugin.xml文件的<name>标记中找到</li><li>pluginStatus：插件调用的状态（见下文）</li><li>result：无论插件调用的结果是什么</li></ul><p>pendingResult字段中pluginStatus的可能值包括以下内容：</p><ul><li>“OK” - 插件调用成功</li><li>“No Result” - 插件调用结束，没有结果</li><li>“Error” - 插件调用导致一些常见错误</li><li>其他杂项错误<ul><li>“找不到类”</li><li>“非法访问”</li><li>“实例化错误”</li><li>“格式错误的网址”</li><li>“IO错误”</li><li>“无效的动作”</li><li>“JSON错误”</li></ul></li></ul><p>请注意，由插件决定结果字段中包含的内容以及返回的pluginStatus的含义。 查看您正在使用的插件的相关API，这些字段应该包含的内容以及如何使用它们的值。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>下面是一个简短的示例应用程序，它使用resume和pause事件来管理状态。 它使用Apache相机插件作为如何从resume事件有效负载检索插件调用结果的示例。 处理resume的event.pendingResult对象的代码部分需要cordova-android 5.1.0+</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This state represents the state of our application and will be saved and</span></span><br><span class="line"><span class="comment">// restored by onResume() and onPause()</span></span><br><span class="line"><span class="keyword">var</span> appState = &#123;</span><br><span class="line">    <span class="attr">takingPicture</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">imageUri</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">APP_STORAGE_KEY</span> = <span class="string">&quot;exampleAppState&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = &#123;</span><br><span class="line">    <span class="attr">initialize</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">bindEvents</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">bindEvents</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// Here we register our callbacks for the lifecycle events we care about</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;deviceready&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onDeviceReady</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pause&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onPause</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resume&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onResume</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onDeviceReady</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;take-picture-button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// Because the camera plugin method launches an external Activity,</span></span><br><span class="line">            <span class="comment">// there is a chance that our application will be killed before the</span></span><br><span class="line">            <span class="comment">// success or failure callbacks are called. See onPause() and</span></span><br><span class="line">            <span class="comment">// onResume() where we save and restore our state to handle this case</span></span><br><span class="line">            appState.<span class="property">takingPicture</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            navigator.<span class="property">camera</span>.<span class="title function_">getPicture</span>(cameraSuccessCallback, cameraFailureCallback,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">sourceType</span>: <span class="title class_">Camera</span>.<span class="property">PictureSourceType</span>.<span class="property">CAMERA</span>,</span><br><span class="line">                    <span class="attr">destinationType</span>: <span class="title class_">Camera</span>.<span class="property">DestinationType</span>.<span class="property">FILE_URI</span>,</span><br><span class="line">                    <span class="attr">targetWidth</span>: <span class="number">250</span>,</span><br><span class="line">                    <span class="attr">targetHeight</span>: <span class="number">250</span></span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onPause</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// Here, we check to see if we are in the middle of taking a picture. If</span></span><br><span class="line">        <span class="comment">// so, we want to save our state so that we can properly retrieve the</span></span><br><span class="line">        <span class="comment">// plugin result in onResume(). We also save if we have already fetched</span></span><br><span class="line">        <span class="comment">// an image URI</span></span><br><span class="line">        <span class="keyword">if</span>(appState.<span class="property">takingPicture</span> || appState.<span class="property">imageUri</span>) &#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable constant_">APP_STORAGE_KEY</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(appState));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onResume</span>: <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="comment">// Here we check for stored state and restore it if necessary. In your</span></span><br><span class="line">        <span class="comment">// application, it&#x27;s up to you to keep track of where any pending plugin</span></span><br><span class="line">        <span class="comment">// results are coming from (i.e. what part of your code made the call)</span></span><br><span class="line">        <span class="comment">// and what arguments you provided to the plugin if relevant</span></span><br><span class="line">        <span class="keyword">var</span> storedState = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">APP_STORAGE_KEY</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(storedState) &#123;</span><br><span class="line">            appState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(storedState);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if we need to restore an image we took</span></span><br><span class="line">        <span class="keyword">if</span>(!appState.<span class="property">takingPicture</span> &amp;&amp; appState.<span class="property">imageUri</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;get-picture-result&quot;</span>).<span class="property">src</span> = appState.<span class="property">imageUri</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Now we can check if there is a plugin result in the event object.</span></span><br><span class="line">        <span class="comment">// This requires cordova-android 5.1.0+</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(appState.<span class="property">takingPicture</span> &amp;&amp; event.<span class="property">pendingResult</span>) &#123;</span><br><span class="line">            <span class="comment">// Figure out whether or not the plugin call was successful and call</span></span><br><span class="line">            <span class="comment">// the relevant callback. For the camera plugin, &quot;OK&quot; means a</span></span><br><span class="line">            <span class="comment">// successful result and all other statuses mean error</span></span><br><span class="line">            <span class="keyword">if</span>(event.<span class="property">pendingResult</span>.<span class="property">pluginStatus</span> === <span class="string">&quot;OK&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">// The camera plugin places the same result in the resume object</span></span><br><span class="line">                <span class="comment">// as it passes to the success callback passed to getPicture(),</span></span><br><span class="line">                <span class="comment">// thus we can pass it to the same callback. Other plugins may</span></span><br><span class="line">                <span class="comment">// return something else. Consult the documentation for</span></span><br><span class="line">                <span class="comment">// whatever plugin you are using to learn how to interpret the</span></span><br><span class="line">                <span class="comment">// result field</span></span><br><span class="line">                <span class="title function_">cameraSuccessCallback</span>(event.<span class="property">pendingResult</span>.<span class="property">result</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">cameraFailureCallback</span>(event.<span class="property">pendingResult</span>.<span class="property">result</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here are the callbacks we pass to getPicture()</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cameraSuccessCallback</span>(<span class="params">imageUri</span>) &#123;</span><br><span class="line">    appState.<span class="property">takingPicture</span> = <span class="literal">false</span>;</span><br><span class="line">    appState.<span class="property">imageUri</span> = imageUri;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;get-picture-result&quot;</span>).<span class="property">src</span> = imageUri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cameraFailureCallback</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    appState.<span class="property">takingPicture</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">initialize</span>();</span><br></pre></td></tr></table></figure><p>对应的 html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27; data: gap: https://ssl.gstatic.com &#x27;unsafe-eval&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;; media-src *&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-tap-highlight&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Cordova Android Lifecycle Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;get-picture-result&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">id</span>=<span class="string">&quot;take-picture-button&quot;</span>&gt;</span>Take Picture<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;cordova.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试-Activity-活动-的生命周期"><a href="#测试-Activity-活动-的生命周期" class="headerlink" title="测试 Activity(活动)的生命周期"></a>测试 Activity(活动)的生命周期</h5><p>Android提供了一个开发人员设置，用于测试低内存上的Activity销毁。 在设备或仿真器的“开发人员选项”菜单中启用“不要保留活动”设置，以模拟低内存情况。 您应始终在启用此设置的情况下进行一些测试，以确保您的应用程序正确维护状态。</p><h3 id="IOS-平台"><a href="#IOS-平台" class="headerlink" title="IOS 平台"></a>IOS 平台</h3><h4 id="要求与支持"><a href="#要求与支持" class="headerlink" title="要求与支持"></a>要求与支持</h4><p>构建iOS应用程序所需的Apple®工具需在基于Intel的Mac上的OS X操作系统上运行。 Xcode®7.0（最低要求版本）需要在OS X版本10.10.4（Yosemite）或更高版本上运行，并包含iOS 9 SDK（软件开发工具包）。 要将应用程序提交到Apple App Store，需要最新版本的Apple工具。</p><p>您可以使用随iOS SDK和Xcode一起安装的iOS模拟器测试许多Cordova功能，但在提交到App Store之前，您需要一个实际的设备来完全测试应用程序的所有设备功能。 该设备必须至少安装iOS 8，从Cordova 4.0.0开始支持最低iOS版本。 支持的设备包括iPhone 4S，iPhone 5，iPhone 5C，iPhone 5S，iPhone 6，iPhone 6 Plus，iPhone 6S，iPhone 6S Plus，iPhone SE，iPad 2，iPad 3，iPad 4，iPad Air，iPad Air 2，iPad Pro ，iPad Mini，iPad Mini 2，iPad Mini 3，iPod Touch 5th gen和iPod Touch 6th或更高版本。</p><h4 id="要求安装"><a href="#要求安装" class="headerlink" title="要求安装"></a>要求安装</h4><h5 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h5><p>有两种方式可以安装 Xcode:</p><ul><li>在<a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12">App Store</a>中下载，可通过在App Store应用程序中搜索“Xcode”获得。</li><li>在<a href="https://idmsa.apple.com/IDMSWebAuth/signin?appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&path=/download/more/&rv=1">Apple 开发平台</a>中下载，需要注册为Apple 开发人员。</li></ul><p>安装Xcode后，需要启用多个命令行工具才能运行Cordova。 在终端执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure><h5 id="部署工具"><a href="#部署工具" class="headerlink" title="部署工具"></a>部署工具</h5><p>ios-deploy工具允许您从命令行在iOS设备上启动iOS应用程序。在终端执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g ios-deploy</span><br></pre></td></tr></table></figure><h4 id="项目配置-1"><a href="#项目配置-1" class="headerlink" title="项目配置"></a>项目配置</h4><p>安装完上面的东西后，您现在就可以创建和构建一个 Cordova 项目了，更多细节，请参考另一篇博文《Cordova快速入门篇》。</p><h5 id="部署应用到模拟器"><a href="#部署应用到模拟器" class="headerlink" title="部署应用到模拟器"></a>部署应用到模拟器</h5><p>要在iOS模拟器中预览应用程序：</p><ol><li>从Xcode或命令行打开工作区文件（platforms / ios / HelloWorld.xcworkspace）：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open ./platforms/ios/HelloWorld.xcworkspace/</span><br></pre></td></tr></table></figure></li><li>确保在左侧面板中选择了HelloWorld项目（1）。<br><img data-src="http://wx2.sinaimg.cn/large/005GXpqPgy1fznuqknlcyj30v80b20v8.jpg" alt="image"></li></ol><ul><li>从工具栏的 <strong>Scheme</strong> 菜单中选择目标设备，例如（2）中突出显示的iPhone 7 Plus Simulator</li><li>按 <strong>Scheme</strong> 菜单左侧相同工具栏中的 <strong>Run</strong> 按钮（3）。 它将在模拟器中构建，部署和运行应用程序。 将打开一个单独的模拟器应用程序以显示该应用：</li></ul><p>一次只能运行一个模拟器，因此如果要在不同的模拟器中测试应用程序，则需要退出模拟器应用程序并在Xcode中运行不同的目标。</p><p>Xcode捆绑了最新版iPhone和iPad的模拟器。 可以从Xcode→首选项…→组件 面板中获得旧版本。</p><h5 id="部署应用到设备"><a href="#部署应用到设备" class="headerlink" title="部署应用到设备"></a>部署应用到设备</h5><p>有关部署到设备的各种要求的详细信息，请参阅Apple的 <a href="https://help.apple.com/xcode/mac/current/#/dev8b4250b57">App 部署流程</a> 。 简而言之，在部署之前需要执行以下操作：</p><ol><li><p>在 <a href="https://idmsa.apple.com/IDMSWebAuth/signin?appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&path=/account/&rv=1">ios 配置面板</a>  中创建配置文件。 您可以使用 Apple 的 <em>开发配置助手</em>    来创建和安装 Xcode 所需的配置文件和证书。</p></li><li><p>验证构建设置中<em>代码签名部分</em>中的<em>代码签名标识</em>设置是否设置为您的配置文件名称。</p></li></ol><p>部署应用到设备：</p><ol><li>使用 USB 接口将您的设备连接到 Mac。</li><li>在 Xcode 的左侧面板的项目列表中选择您要运行的项目</li><li>在 Xcode 的 Scheme 菜单左侧的下拉列表中选择您的设备。</li><li>按下 <strong>Run</strong> 按钮，将会执行构建，部署并运行应用程序到您的设备上。</li></ol><h4 id="App-签名"><a href="#App-签名" class="headerlink" title="App 签名"></a>App 签名</h4><p>首先，请查看 Apple 开发人员网站的 <a href="https://developer.apple.com/support/code-signing/">代码签名支持</a> 和 <a href="https://help.apple.com/xcode/mac/current/#/dev8b4250b57">应用部署流程</a></p><h5 id="使用标识符"><a href="#使用标识符" class="headerlink" title="使用标识符"></a>使用标识符</h5><p>要对 App 进行签名，您需要了解以下参数：</p><table><thead><tr><th>参数名</th><th>标识符</th><th>说明</th></tr></thead><tbody><tr><td>代码签名身份</td><td>–codeSignIdentity2</td><td>用于签名的代码签名身份。 它可以使用Xcode创建并添加到您的钥匙串中。 从Xcode 8开始，您应该使用–codeSignIdentity =“iPhone Developer”进行调试和发布。</td></tr><tr><td>开发团队</td><td>–developmentTeam</td><td>用于代码签名的开发团队（团队ID）。 您可以使用此设置和简化的代码签名身份（即只是“iPhone开发人员”）来签署您的应用程序，无需提供配置文件。</td></tr><tr><td>打包类型</td><td>–packageType</td><td>这会决定 Xcode 构建什么类型的 App。 有效选项包括开发（默认），企业，ad-hoc和应用商店。</td></tr><tr><td>配置文件</td><td>–provisioningProfile</td><td>（可选）用于手动签名的配置文件的GUID。 它会在 Mac 上复制：〜/ Library / MobileDevice / Provisioning \ Profiles /。 在文本编辑器中打开它，如果使用手动签名，您可以找到需要在此处指定的GUID。</td></tr><tr><td>代码签名资源规则</td><td>–codesignResourceRules</td><td>(可选)用来配置哪些文件会作为代码签名的捆绑，查看 <a href="https://developer.apple.com/library/archive/technotes/tn2206/_index.html#//apple_ref/doc/uid/DTS40007919-CH1-TNTAG206">OS X 代码签名</a> 了解更多信息。</td></tr><tr><td>自动配置</td><td>–automaticProvisioning</td><td>（可选）启用以允许Xcode自动管理配置文件。 有效选项为false（默认值）和true。</td></tr></tbody></table><h5 id="使用-build-json-1"><a href="#使用-build-json-1" class="headerlink" title="使用 build.json"></a>使用 build.json</h5><p>或者，您可以使用相同命令的–buildConfig参数在构建配置文件（build.json）中指定它们。 以下是构建配置文件的示例：</p><p>对于自动签名，配置配置文件由Xcode自动管理（推荐）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ios&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codeSignIdentity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iPhone Developer&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;developmentTeam&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FG35JLLMXX4A&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;packageType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;development&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;automaticProvisioning&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;buildFlag&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;EMBEDDED_CONTENT_CONTAINS_SWIFT = YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;LD_RUNPATH_SEARCH_PATHS = \&quot;@executable_path/Frameworks\&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;release&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codeSignIdentity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iPhone Developer&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;developmentTeam&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FG35JLLMXX4A&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;packageType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app-store&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;automaticProvisioning&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;buildFlag&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;EMBEDDED_CONTENT_CONTAINS_SWIFT = YES&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES=NO&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;LD_RUNPATH_SEARCH_PATHS = \&quot;@executable_path/Frameworks\&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对于手动签名，要根据 UUID 指定配置文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ios&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codeSignIdentity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iPhone Development&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provisioningProfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;926c2bd6-8de9-4c2f-8407-1016d2d12954&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;developmentTeam&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FG35JLLMXX4A&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;packageType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;development&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;release&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codeSignIdentity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iPhone Distribution&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provisioningProfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;70f699ad-faf1-4adE-8fea-9d84738fb306&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;developmentTeam&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FG35JLLMXX4A&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;packageType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app-store&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Xcode-构建标志符"><a href="#Xcode-构建标志符" class="headerlink" title="Xcode 构建标志符"></a>Xcode 构建标志符</h4><p>如果您有自定义情况需要将其他构建标志传递给Xcode  - 您将使用一个或多个 –buildFlag 选项将这些标志传递给 xcodebuild。 如果您使用 xcodebuild 内置标志，它将显示警告。 您还可以在上面的build.json中指定buildFlag选项（buildFlag键的值是字符串或字符串数组）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cordova build --device --buildFlag=<span class="string">&quot;MYSETTING=myvalue&quot;</span> --buildFlag=<span class="string">&quot;MY_OTHER_SETTING=othervalue&quot;</span></span><br><span class="line">cordova run --device --buildFlag=<span class="string">&quot;DEVELOPMENT_TEAM=FG35JLLMXX4A&quot;</span> --buildFlag=<span class="string">&quot;-scheme TestSchemeFlag&quot;</span></span><br></pre></td></tr></table></figure><h4 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h4><p>有关Xcode附带的调试工具的详细信息，请查看这篇<a href="https://developer.apple.com/support/debugging/">Apple 开发调试部分</a>。</p><p>用于iOS项目的Cordova可以在Xcode中打开。如果您希望使用内置调试/分析工具的Xcode，或者您正在开发iOS插件，这将非常有用。请注意，在Xcode中打开项目时，建议您不要在IDE中编辑代码。这将编辑项目的平台文件夹（而不是www）中的代码，并且可能会覆盖更改。而是编辑www文件夹并通过运行cordova build复制您的更改。</p><p>希望在IDE中编辑其原生代码的插件开发人员在通过cordova插件添加将其插件添加到项目时应使用–link标志。这将链接文件，以便对平台文件夹中的插件文件的更改反映在插件的源文件夹中（反之亦然）。</p><p>将ios平台添加到项目并使用cordova构建后，您可以在Xcode中打开它。双击打开$ {PROJECT_NAME} / platforms / ios / $ {PROJECT_NAME} .xcworkspace文件或从终端打开Xcode：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open -a Xcode platforms/ios</span><br></pre></td></tr></table></figure><p>界面如下所示：<br><img data-src="http://wx3.sinaimg.cn/large/005GXpqPgy1fznuqm5s1lj30wy0mf0wn.jpg" alt="image"></p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>有关升级cordova-ios版本的说明，请参阅此<a href="https://cordova.apache.org/docs/en/latest/guide/platforms/ios/upgrade.html">文章</a>。 </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Android-平台&quot;&gt;&lt;a href=&quot;#Android-平台&quot; class=&quot;headerlink&quot; title=&quot;Android 平台&quot;&gt;&lt;/a&gt;Android 平台&lt;/h3&gt;&lt;p&gt;支持的Android API级别和过去几个cordova-android版本的Android版本：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;cordova-android 版本&lt;/th&gt;
&lt;th&gt;支持的 API 级别&lt;/th&gt;
&lt;th&gt;实际安卓版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;7.X.X&lt;/td&gt;
&lt;td&gt;19 - 27&lt;/td&gt;
&lt;td&gt;4.4 - 8.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.X.X&lt;/td&gt;
&lt;td&gt;16 - 26&lt;/td&gt;
&lt;td&gt;4.1 - 8.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.X.X&lt;/td&gt;
&lt;td&gt;14 - 23&lt;/td&gt;
&lt;td&gt;4.0 - 6.0.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.1.X&lt;/td&gt;
&lt;td&gt;14 - 22&lt;/td&gt;
&lt;td&gt;4.0 - 5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.0.X&lt;/td&gt;
&lt;td&gt;10 - 22&lt;/td&gt;
&lt;td&gt;2.3.3 - 5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.7.X&lt;/td&gt;
&lt;td&gt;10 - 21&lt;/td&gt;
&lt;td&gt;2.3.3 - 5.0.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="mobile" scheme="https://yekongle.github.io/categories/mobile/"/>
    
    
    <category term="Cordova" scheme="https://yekongle.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>Cordova快速入门</title>
    <link href="https://yekongle.github.io/2019/01/22/cordova-quick-learn/"/>
    <id>https://yekongle.github.io/2019/01/22/cordova-quick-learn/</id>
    <published>2019-01-21T16:39:51.000Z</published>
    <updated>2022-03-18T13:50:49.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><h4 id="数说移动端的几种开发模式"><a href="#数说移动端的几种开发模式" class="headerlink" title="数说移动端的几种开发模式"></a>数说移动端的几种开发模式</h4><ul><li>Native App: 采用原生代码进行，优点就是体验好，缺点是需要为不同的系统平台独立开发一套应用，开发成本较高。</li><li>Web app: 一般是指 SAP(SinglePageApplication) 模式开发出的网站，体验较差。</li><li> React Native App: 是 Facebook 开源的一套App开发解决方案，让你只使用 JavaScript 也能够编写原生移动应用，它在设计原理上和 React 一致，通过声明式的组件机制来搭建丰富多彩的用户界面，能够实现大部分的跨平台，体验较好。</li><li>Hybrid App: 混合开发模式，由Native 通过 JSBridge(一种)等方法提供统一的API，然后用前端语言(HTML、JS、CSS) 来写实际的界面和逻辑，再调用API，最终应用的页面是在 webview中示，从而达到跨平台效果，常见的是用Phonegap或Cordova中间件组合其他移动UI框架进行开发。</li><li>值得注意的是，RN App 和 Hybrid App 还是有本质区别的，RN App 是用JavaScript告诉原生语言做什么，所以最终在平台上运行的都是原生语言，包括UI等，也是原生的组件，而 Hybrid App中显示的大多是 webview，webview 里套常见的移动UI框架。Hybird App的原理图如下W：</li></ul><span id="more"></span><p><img data-src="http://wx2.sinaimg.cn/large/005GXpqPgy1fznuqhlz3vj30cc0fa74e.jpg" alt="image"></p><h4 id="Cordova的前世今生"><a href="#Cordova的前世今生" class="headerlink" title="Cordova的前世今生"></a>Cordova的前世今生</h4><p>Cordova前身是 Phonegap，最先由 Nitobi 软件公司在2008年推出，旨在弥补 web 和 ios 之间的不足，使得 web 和 iphone SDK 之间的交互更容易，后来陆续加入了更多的平台。</p><p>2011年，Adobe公司收购 Nitobi 后，将phonegap 项目的核心代码捐赠给了 Apache软件基金会(ASF), 使其保持透明和持续的发展，Apchae将其命名为 Cordova，而Adobe PhoneGap则发展出了一些服务型工具，如 Phonegap destop App、 Phonegap developer App、Phonegap build、Phonegap CLI等。</p><p>很多人可能会问：那 Cordova 和 Phonegap 的区别到底是什么，其实Cordova相当于驱动 Phonegap 的核心引擎，就好比如 WebKit 是现在大多数浏览器的引擎一样，因此 Adobe PhoneGap可理解为是Apache Cordova 的应用发行版。</p><p>Cordova的架构原理图如下，可知 Cordova 是混合App开发的一个中间件。</p><p><img data-src="http://wx1.sinaimg.cn/large/005GXpqPgy1fznuqi2d0oj30nf0ijgmp.jpg" alt="image"></p><h3 id="Cordova安装"><a href="#Cordova安装" class="headerlink" title="Cordova安装"></a>Cordova安装</h3><p>安装 Cordova 前，需要准备两样东西。</p><ol><li>下载安装 Node.js，这样就可以使用 Node.js 的 npm 软件管理包。</li><li>安装 Git，因为当涉及到一些 git 仓库时会使用 git 来下载相关的资源。</li></ol><p>Mac Os 或 Linux平台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g cordova</span><br></pre></td></tr></table></figure><p>Windows：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;npm install -g cordova</span><br></pre></td></tr></table></figure><p>-g 参数是指告诉 npm 要全局安装 Cordova，不然会被安装在当前目录的子目录 node_modules 下。</p><h3 id="Cordova使用"><a href="#Cordova使用" class="headerlink" title="Cordova使用"></a>Cordova使用</h3><h4 id="创建一个-App-项目"><a href="#创建一个-App-项目" class="headerlink" title="创建一个 App 项目"></a>创建一个 App 项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova create hello[Required] com.example.hello[Optional] HelloWorld[Optional]</span><br></pre></td></tr></table></figure><p>hello 是指项目文件夹名，com.example.hello 是应用程序的 ID 名，可在 config.xml 中更改。 HelloWorld，是 App 的名称，也可在 config.xml 中更改<br>这样就会创建最基本的App目录结构，默认会生成基于的web的应用主页，即为项目目录下的 www/index.html</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>Cordova 默认创建的 App 目录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">myapp/</span><br><span class="line">|-- config.xml</span><br><span class="line">|-- hooks/</span><br><span class="line">|-- merges/</span><br><span class="line">| | |-- android/</span><br><span class="line">| | |-- windows/</span><br><span class="line">| | |-- ios/</span><br><span class="line">|-- www/</span><br><span class="line">|-- platforms/</span><br><span class="line">| |-- android/</span><br><span class="line">| |-- windows/</span><br><span class="line">| |-- ios/</span><br><span class="line">|-- plugins/</span><br><span class="line">  |--cordova-plugin-camera/</span><br></pre></td></tr></table></figure><ul><li>config.xml: 在这你可以自定义 App 项目的信息</li><li>www/: 包括项目的web代码，如 html, css 和 js 文件，你将在这开发你 App 的主要代码，另外在 plaform 目录下的ios 目录或 android 目录下，也会有一个 www 目录，是基于 project/www 目录编译覆盖的。</li><li>platform/: 包括你添加的平台的源码和脚本，注意一般不要该目录下的代码，否则可能造成在相关平台运行不了。</li><li>plugins/: 插件目录，所有添加的插件都会被解压并复制到该目录下。</li><li>hooks/：可以包含用于自定义 Cordova-CLI 命令的脚本， 您添加到这些目录的任何脚本都将在与目录名对应的命令之前和之后执行。 用于集成您自己的构建系统或与版本控制系统。</li><li>merges/: 包含一些与特定平台相关联的 web 资源(HTML, CSS 和 JavaScript 文件),放在merges /下的文件将覆盖相关平台的www /文件夹中的匹配文件。 一个简单的例子，假设一个项目结构：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">merges/</span><br><span class="line">|-- ios/</span><br><span class="line">| -- app.js</span><br><span class="line">|-- android/</span><br><span class="line">| -- android.js</span><br><span class="line">www/</span><br><span class="line">-- app.js</span><br></pre></td></tr></table></figure><p>在构建Android和iOS项目之后，Android应用程序将同时包含app.js和android.js，而iOS应用程序则只包含app.js，它是将 merges/ios/app.js，覆盖位于www/内的通用的app.js。</p><h4 id="添加平台"><a href="#添加平台" class="headerlink" title="添加平台"></a>添加平台</h4><p>首先进入项目目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hello</span><br></pre></td></tr></table></figure><p>添加开发平台，会在 config.xml 和 package.json 中有记录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cordova platform add ios</span><br><span class="line">$ cordova platform add android</span><br></pre></td></tr></table></figure><p>执行上面两条命令后会在 platform 目录下生成 ios 和 android 两个子目录，用来存放编译后的代码和一些app的内容。</p><p>查看项目已添加的平台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova platform <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>当在 www 目录下开发完毕后，用以下命令构建项目到各个平台：</p><h4 id="构建前准备"><a href="#构建前准备" class="headerlink" title="构建前准备"></a>构建前准备</h4><p>要构建和运行应用程序，您需要为您想要开发的每个平台安装对应的SDK。 或者，如果您使用浏览器进行开发，则可以使用不需要任何平台SDK的浏览器平台。</p><p>查看您是否满足必须条件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cordova requirements</span><br><span class="line">Requirements check results <span class="keyword">for</span> android:</span><br><span class="line">Java JDK: installed .</span><br><span class="line">Android SDK: installed</span><br><span class="line">Android target: installed android-19,android-21,android-22,android-23,Google Inc.:Google APIs:19,Google Inc.:Google APIs (x86 System Image):19,Google Inc.:Google APIs:23</span><br><span class="line">Gradle: installed</span><br><span class="line"></span><br><span class="line">Requirements check results <span class="keyword">for</span> ios:</span><br><span class="line">Apple OS X: not installed</span><br><span class="line">Cordova tooling <span class="keyword">for</span> iOS requires Apple OS X</span><br><span class="line">Error: Some of requirements check failed</span><br></pre></td></tr></table></figure><h4 id="应用构建与运行"><a href="#应用构建与运行" class="headerlink" title="应用构建与运行"></a>应用构建与运行</h4><h5 id="构建应用"><a href="#构建应用" class="headerlink" title="构建应用"></a>构建应用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cordova build [&lt;platform&gt; [...]]</span><br><span class="line">    [--debug|--release]</span><br><span class="line">    [--device|--emulator]</span><br><span class="line">    [--buildConfig=&lt;configfile&gt;]</span><br><span class="line">    [--browserify]</span><br><span class="line">    [-- &lt;platformOpts&gt;]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><platform>[…]</td><td>要构建的平台名，没指定则为所有平台进行编译构建</td></tr><tr><td>–debug</td><td>构建调试模式</td></tr><tr><td>–release</td><td>构建发布模式</td></tr><tr><td>–device</td><td>构建到设备</td></tr><tr><td>–emulator</td><td>构建到模拟器</td></tr><tr><td>–buildConfig=<configFile></td><td>使用特定的配置文件来编译构建，如指定签名等。</td></tr><tr><td>–browserity</td><td>在构建时编译JS插件而不是运行时</td></tr><tr><td><platformOpts></td><td>提供特定的选项</td></tr></tbody></table><h5 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cordova run [&lt;platform&gt; [...]]</span><br><span class="line">    [--list | --debug | --release]</span><br><span class="line">    [--noprepare] [--nobuild]</span><br><span class="line">    [--device|--emulator|--target=&lt;targetName&gt;]</span><br><span class="line">    [--buildConfig=&lt;configfile&gt;]</span><br><span class="line">    [--browserify]</span><br><span class="line">    [-- &lt;platformOpts&gt;]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><platform>[…]</td><td>要运行的平台名，没指定则所有平台都运行</td></tr><tr><td>–list</td><td>列出可用的运行目标，包括模拟器和设备，除非特定指定</td></tr><tr><td>–debug</td><td>默认选型，运行调试模式</td></tr><tr><td>–release</td><td>运行发布模式</td></tr><tr><td>–noprepare</td><td>跳过准备阶段，适用于Cordova v6.2及其之后版本。</td></tr><tr><td>–nobuild</td><td>跳过重新构建阶段</td></tr><tr><td>–device</td><td>在设备上运行</td></tr><tr><td>–emulator</td><td>在模拟器上运行</td></tr><tr><td>–target</td><td>指定运行目标</td></tr><tr><td>–buildConfig=<configFile></td><td>使用特定的配置文件来编译构建，如指定签名等。</td></tr><tr><td>–browserity</td><td>在构建时编译JS插件而不是在运行时</td></tr><tr><td><platformOpts></td><td>提供特定的选项</td></tr></tbody></table><h4 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h4><p>可以在 <a href="https://cordova.apache.org/plugins/">Cordova插件资源</a> 页面中查询需要的插件，也可以使用命令行搜索相关插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cordova plugin search camera</span><br></pre></td></tr></table></figure><p>添加某个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cordova plugin add cordova-plugin-camera</span><br><span class="line">Fetching plugin <span class="string">&quot;cordova-plugin-camera@~2.1.0&quot;</span> via npm</span><br><span class="line">Installing <span class="string">&quot;cordova-plugin-camera&quot;</span> <span class="keyword">for</span> android</span><br><span class="line">Installing <span class="string">&quot;cordova-plugin-camera&quot;</span> <span class="keyword">for</span> ios</span><br></pre></td></tr></table></figure><p>插件也可以通过目录或 Git 仓库的形式添加</p><p>注意：（CLI为每个平台添加适当的插件代码。 如果您希望使用概述中讨论的低级shell工具或平台SDK进行开发，则需要运行Plugman实用程序以为每个平台单独添加插件。 （有关更多信息，请参阅使用Plugman管理插件。）</p><p>查看已安装的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cordova plugin <span class="built_in">ls</span></span><br><span class="line">cordova-plugin-camera 2.1.0 <span class="string">&quot;Camera&quot;</span></span><br><span class="line">cordova-plugin-whitelist 1.2.1 <span class="string">&quot;Whitelist&quot;</span></span><br></pre></td></tr></table></figure><h4 id="使用合并功能"><a href="#使用合并功能" class="headerlink" title="使用合并功能"></a>使用合并功能</h4><p>虽然Cordova允许您能够轻松地为许多不同平台部署应用程序，但实际上您时常需要添加一些自定义项。在这种情况下，您当然不希望修改不同平台下的www目录中的源文件，因为它们经常被顶级www目录的资源替换。</p><p>因此，Cordova 在顶级目录下提供了一个位置(merge目录)可以指定在哪个平台部署资源。merge目录中的平台子目录都对应着 www源码目录机构，允许您根据需要覆盖或添加文件。例如，你可能会使用合并功能为 Android 设备设置默认的字体大小：</p><ul><li>在 www/index.html 文件中，添加一条指向额外的CSS样式文件的链接：overrides.css</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;css/overrides.css&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>（可选）创建一个空的www / css / overrides.css文件，该文件适用于所有非Android版本，防止丢失文件错误。</li><li>在merges / android中创建一个css子目录，然后添加一个相应的overrides.css文件。 指定覆盖www / css / index.css中指定的12磅默认字体大小的CSS，例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body &#123; font-size:14px; &#125;</span><br></pre></td></tr></table></figure><p>当你重新构建项目后，只有 android 平台会应用自定义字体大小的样式，而其他平台保持不变。</p><h4 id="更新-Cordova-和您的项目"><a href="#更新-Cordova-和您的项目" class="headerlink" title="更新 Cordova 和您的项目"></a>更新 Cordova 和您的项目</h4><p>升级 Cordova 版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm update -g cordova</span><br></pre></td></tr></table></figure><p>安装指定的 Cordova 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g cordova@3.1.0-0.2.0</span><br></pre></td></tr></table></figure><p>查看 Cordova 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova -v</span><br></pre></td></tr></table></figure><p>查看最新 Cordova 最新版本相关信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm info cordova version</span><br></pre></td></tr></table></figure><p>更新指定的平台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cordova platform update android --save</span><br><span class="line">$ cordova platform update ios --save</span><br><span class="line">...etc.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;h4 id=&quot;数说移动端的几种开发模式&quot;&gt;&lt;a href=&quot;#数说移动端的几种开发模式&quot; class=&quot;headerlink&quot; title=&quot;数说移动端的几种开发模式&quot;&gt;&lt;/a&gt;数说移动端的几种开发模式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Native App: 采用原生代码进行，优点就是体验好，缺点是需要为不同的系统平台独立开发一套应用，开发成本较高。&lt;/li&gt;
&lt;li&gt;Web app: 一般是指 SAP(SinglePageApplication) 模式开发出的网站，体验较差。&lt;/li&gt;
&lt;li&gt; React Native App: 是 Facebook 开源的一套App开发解决方案，让你只使用 JavaScript 也能够编写原生移动应用，它在设计原理上和 React 一致，通过声明式的组件机制来搭建丰富多彩的用户界面，能够实现大部分的跨平台，体验较好。&lt;/li&gt;
&lt;li&gt;Hybrid App: 混合开发模式，由Native 通过 JSBridge(一种)等方法提供统一的API，然后用前端语言(HTML、JS、CSS) 来写实际的界面和逻辑，再调用API，最终应用的页面是在 webview中示，从而达到跨平台效果，常见的是用Phonegap或Cordova中间件组合其他移动UI框架进行开发。&lt;/li&gt;
&lt;li&gt;值得注意的是，RN App 和 Hybrid App 还是有本质区别的，RN App 是用JavaScript告诉原生语言做什么，所以最终在平台上运行的都是原生语言，包括UI等，也是原生的组件，而 Hybrid App中显示的大多是 webview，webview 里套常见的移动UI框架。Hybird App的原理图如下W：&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="mobile" scheme="https://yekongle.github.io/categories/mobile/"/>
    
    
    <category term="Cordova" scheme="https://yekongle.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>PR视频字幕批量生成程序(用讯飞听见识别音频)</title>
    <link href="https://yekongle.github.io/2017/11/23/auto-caption-procedure/"/>
    <id>https://yekongle.github.io/2017/11/23/auto-caption-procedure/</id>
    <published>2017-11-23T08:52:20.000Z</published>
    <updated>2022-03-18T13:50:49.479Z</updated>
    
    <content type="html"><![CDATA[<p> 用过视频剪辑软件的小伙伴们可能都会为添加视频字幕所烦恼，尤其是当一个视频包含了大量语音而且只有你一个人在配字幕的时候,那就变得很蛋疼；尽管到最后你完成了这么庞大的工作量，但是你都会一度怀疑自己的人生。我曾经为一个十来分钟的视频配字幕都配到我想吐。</p><span id="more"></span><p> 然后我最近看B站发现一个挺有意思的事情,就是利用讯飞语音识别服务可以识别语音并且自动生成文字，这就省掉了不少人力去听的功夫。众所周知科大讯飞的语音识别功能是蛮强的，看过老罗手机发布会视频的就能知道。知道了这个功能后，我就想到要做一个PR字幕自动生成工具,下面将讲解我是怎么一步步实现的。</p><p>  <img data-src="http://wx4.sinaimg.cn/large/005GXpqPgy1fznubgrdgcj31go0o5gnb.jpg" alt="image"></p><p>首先打开<a href="http://www.iflyrec.com/">讯飞听见</a>，遗憾的是，讯飞的这个语音识别功能是要收费的，看下价格，一种是机器快转（19.8元/小时），另一种是人机精转（80元/小时），看到这里，你是否心想：妖，都要收费的，我一个农村来的怎么负担得起。别急，我也是这样想的，继续往下看。点击上图的立即下单 </p><p><img data-src="http://wx2.sinaimg.cn/large/005GXpqPgy1fznubhi7nfj31gf0qcach.jpg" alt="这里写图片描述"></p><p>进入到这个页面，我们可以发现讯飞提供了一个体验的功能，就是你可以上传一段录音来体验一下他们家的这个语音识别功能，当然它是有限制的，你最多可以同时上传50条语音，每条语音不超过500M且不超过1分钟时长。所以说，这个功能对后期才配音的人员就比较友好。当然找个工具分割一下语音也是可以的，有空我再看看能不能写段代码实现语音分割。这里我上传了两条语音来试一下 </p><p><img data-src="http://wx2.sinaimg.cn/large/005GXpqPgy1fznubhz9w6j31gk0odabf.jpg" alt="这里写图片描述"></p><p><img data-src="http://wx4.sinaimg.cn/large/005GXpqPgy1fznubihbpxj31gw0h4wfb.jpg" alt="这里写图片描述"></p><p>从上图可以看到它识别的准确度还是蛮高的。但如果你想要复制识别出来的文本是不行的，它已经做了限制了复制的功能。这里写了个js插件，可以一次性获取识别出的文本。</p><p><img data-src="http://wx3.sinaimg.cn/large/005GXpqPgy1fznubj74hqj31g90aswf0.jpg" alt="这里写图片描述"></p><p><img data-src="http://wx2.sinaimg.cn/large/005GXpqPgy1fznubjvbaoj31go0c7mxm.jpg" alt="这里写图片描述"></p><p>在浏览器添加插件后刷新页面 ,可以发现红色箭头处多了个按钮，点击“获取数据”按钮就可以获得文本并显示在左边箭头所指的文本框里。右下角可以自由拉大缩小文本框</p><p><img data-src="http://wx1.sinaimg.cn/large/005GXpqPgy1fznubkcwmjj31870hxmxw.jpg" alt="这里写图片描述"></p><p>全选复制上图箭头所指文本框的内容，然后新建一个txt文件或者json文件，用记事本打开粘贴到里面,然后点击菜单文件的另存为,将编码ANSI改为UTF-8,保存。注意一定要更改编码，不然后面生成的字幕文件会出现乱码。</p><p><img data-src="http://wx3.sinaimg.cn/large/005GXpqPgy1fznubku4h4j30ku00xjr9.jpg" alt="这里写图片描述"></p><p><img data-src="http://wx4.sinaimg.cn/large/005GXpqPgy1fznublexorj30ou03v3yj.jpg" alt="这里写图片描述"></p><p><img data-src="http://wx2.sinaimg.cn/large/005GXpqPgy1fznubm3s4kj30q40d70tb.jpg" alt="这里写图片描述"></p><p>字幕文本保存好后，接下来就要生成一个字幕模板，这里使用的Premiere CC pro 2017软件。打开PR,先根据自己的喜好制作一个字幕样式当作字幕模板。接着选中字幕模板-&gt;文件-&gt;导出-&gt;标题,就可以生成一个字幕模板 </p><p><img data-src="http://wx2.sinaimg.cn/large/005GXpqPgy1fznubmn3ydj31gl0qxgoa.jpg" alt="这里写图片描述"></p><p><img data-src="http://wx1.sinaimg.cn/large/005GXpqPgy1fznubnb96uj31gd0q477m.jpg" alt="这里写图片描述"></p><p>本来想分析一下整个序列的，但是不知什么原因PR导出Fianl cut pro xml总是提示有转换有问题，只好作罢。如果可以获得正确的序列的xml,就可以增改里面的代码，按时间线调整素材的顺序，再导入PR就可以自动排序好视频音频字幕的顺序 。(理论上是这样，但在我看到整个序列的xml之后，我有点怀疑我的想法，因为我感觉我在看天书。)</p><p><img data-src="http://wx3.sinaimg.cn/large/005GXpqPgy1fznubnrrugj30ua04dq34.jpg" alt="这里写图片描述"></p><p>这里我右击打开字幕文件，找到存放字幕文本的标签TRString,这样更改里面的文本就相当于换了一个字幕文件？如果你这样做PR是不能正确识别的。还有个地方需要注意的就是更改TRString下文本的同时也要注意这个文本的长度是多少，因为CharacterAttributes这个标签下的属RunCount就是记录文本字符的长度的。但就找到并了解它们就花了我大半天，晕~~。知道了这两个标签的作用后，就可以通过程序来修改它了。 </p><p><img data-src="http://wx4.sinaimg.cn/large/005GXpqPgy1fznubor3h6j31gc0nzdp1.jpg" alt="这里写图片描述"></p><p>OK,一切准备就绪，就是准备好了json格式的文本和字幕模板后，我们就可以通过java程序来整合他们并生成字幕了。这里我写了个java工具，可以完成这一平时操作起来非常耗时又费劲的工作。<br><img data-src="http://wx1.sinaimg.cn/large/005GXpqPgy1fznubpb4mpj30o60fi3zr.jpg" alt="这里写图片描述"></p><p>用法也很简单，就是选择字幕模板，字幕文件和保存路径就可以批量生成字幕了，字幕文件将保存在一个名为Titles的目录里,这样方便整个目录拷贝到PR中。值得注意的是，目前仅支持PR CC版本的字幕文件。还有就是要运行它前提是要有<a href="http://jingyan.baidu.com/article/e75aca85b29c3b142edac6a8.html">java运行环境</a>。其它版本的PR，如cs,非常有空或者有兴致的时候再改下。</p><p> <img data-src="http://wx1.sinaimg.cn/large/005GXpqPgy1fznubpxy0fj30na04j74f.jpg" alt="这里写图片描述"></p><p><img data-src="http://wx1.sinaimg.cn/large/005GXpqPgy1fznubqer6fj31910f5wg0.jpg" alt="这里写图片描述"> </p><p><img data-src="http://wx1.sinaimg.cn/large/005GXpqPgy1fznubqxflkj319f0cnmyh.jpg" alt="这里写图片描述"></p><p>可以看到生成的字幕文件导入后能够正确识别,样式也和原来的模板保持一致；时间线也是按顺序来的,只要在前面导入语音识别时顺序没搞乱的话。事实上一般你在配音的时候无论用的是手机还是录音笔，都是会按照一定的顺序生成文件名的，所以一般已经不会搞乱，我的建议是都把录音都放在一个单独的文件夹里。</p><p>至此就完成了字幕的批量生成，只需用到两个工具，一个是js插件，用来获取讯飞识别出来的文本,一个是 java工具,一步到位生成字幕到指定目录。<br>如果想直接用这两个工具的话,戳这里:<a href="http://pan.baidu.com/s/1slBIYCl"  target="_brank">密码：9o5n</a></p><p>如果想分析源码的话,戳这里:<a href="http://pan.baidu.com/s/1slwPYjj" target="_brank">密码：hsgl</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; 用过视频剪辑软件的小伙伴们可能都会为添加视频字幕所烦恼，尤其是当一个视频包含了大量语音而且只有你一个人在配字幕的时候,那就变得很蛋疼；尽管到最后你完成了这么庞大的工作量，但是你都会一度怀疑自己的人生。我曾经为一个十来分钟的视频配字幕都配到我想吐。&lt;/p&gt;</summary>
    
    
    
    <category term="Interesting" scheme="https://yekongle.github.io/categories/Interesting/"/>
    
    
    <category term="Clip" scheme="https://yekongle.github.io/tags/Clip/"/>
    
    <category term="Caption" scheme="https://yekongle.github.io/tags/Caption/"/>
    
    <category term="Java" scheme="https://yekongle.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
